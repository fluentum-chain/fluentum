// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tendermint/types/evidence.proto

package types

import (
	_ "github.com/fluentum-chain/fluentum/proto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Evidence struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Sum:
	//
	//	*Evidence_DuplicateVoteEvidence
	//	*Evidence_LightClientAttackEvidence
	Sum           isEvidence_Sum `protobuf_oneof:"sum"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Evidence) Reset() {
	*x = Evidence{}
	mi := &file_tendermint_types_evidence_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evidence) ProtoMessage() {}

func (x *Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_evidence_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evidence.ProtoReflect.Descriptor instead.
func (*Evidence) Descriptor() ([]byte, []int) {
	return file_tendermint_types_evidence_proto_rawDescGZIP(), []int{0}
}

func (x *Evidence) GetSum() isEvidence_Sum {
	if x != nil {
		return x.Sum
	}
	return nil
}

func (x *Evidence) GetDuplicateVoteEvidence() *DuplicateVoteEvidence {
	if x != nil {
		if x, ok := x.Sum.(*Evidence_DuplicateVoteEvidence); ok {
			return x.DuplicateVoteEvidence
		}
	}
	return nil
}

func (x *Evidence) GetLightClientAttackEvidence() *LightClientAttackEvidence {
	if x != nil {
		if x, ok := x.Sum.(*Evidence_LightClientAttackEvidence); ok {
			return x.LightClientAttackEvidence
		}
	}
	return nil
}

type isEvidence_Sum interface {
	isEvidence_Sum()
}

type Evidence_DuplicateVoteEvidence struct {
	DuplicateVoteEvidence *DuplicateVoteEvidence `protobuf:"bytes,1,opt,name=duplicate_vote_evidence,json=duplicateVoteEvidence,proto3,oneof"`
}

type Evidence_LightClientAttackEvidence struct {
	LightClientAttackEvidence *LightClientAttackEvidence `protobuf:"bytes,2,opt,name=light_client_attack_evidence,json=lightClientAttackEvidence,proto3,oneof"`
}

func (*Evidence_DuplicateVoteEvidence) isEvidence_Sum() {}

func (*Evidence_LightClientAttackEvidence) isEvidence_Sum() {}

// DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
type DuplicateVoteEvidence struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	VoteA            *Vote                  `protobuf:"bytes,1,opt,name=vote_a,json=voteA,proto3" json:"vote_a,omitempty"`
	VoteB            *Vote                  `protobuf:"bytes,2,opt,name=vote_b,json=voteB,proto3" json:"vote_b,omitempty"`
	TotalVotingPower int64                  `protobuf:"varint,3,opt,name=total_voting_power,json=totalVotingPower,proto3" json:"total_voting_power,omitempty"`
	ValidatorPower   int64                  `protobuf:"varint,4,opt,name=validator_power,json=validatorPower,proto3" json:"validator_power,omitempty"`
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DuplicateVoteEvidence) Reset() {
	*x = DuplicateVoteEvidence{}
	mi := &file_tendermint_types_evidence_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DuplicateVoteEvidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateVoteEvidence) ProtoMessage() {}

func (x *DuplicateVoteEvidence) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_evidence_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateVoteEvidence.ProtoReflect.Descriptor instead.
func (*DuplicateVoteEvidence) Descriptor() ([]byte, []int) {
	return file_tendermint_types_evidence_proto_rawDescGZIP(), []int{1}
}

func (x *DuplicateVoteEvidence) GetVoteA() *Vote {
	if x != nil {
		return x.VoteA
	}
	return nil
}

func (x *DuplicateVoteEvidence) GetVoteB() *Vote {
	if x != nil {
		return x.VoteB
	}
	return nil
}

func (x *DuplicateVoteEvidence) GetTotalVotingPower() int64 {
	if x != nil {
		return x.TotalVotingPower
	}
	return 0
}

func (x *DuplicateVoteEvidence) GetValidatorPower() int64 {
	if x != nil {
		return x.ValidatorPower
	}
	return 0
}

func (x *DuplicateVoteEvidence) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
type LightClientAttackEvidence struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ConflictingBlock    *LightBlock            `protobuf:"bytes,1,opt,name=conflicting_block,json=conflictingBlock,proto3" json:"conflicting_block,omitempty"`
	CommonHeight        int64                  `protobuf:"varint,2,opt,name=common_height,json=commonHeight,proto3" json:"common_height,omitempty"`
	ByzantineValidators []*Validator           `protobuf:"bytes,3,rep,name=byzantine_validators,json=byzantineValidators,proto3" json:"byzantine_validators,omitempty"`
	TotalVotingPower    int64                  `protobuf:"varint,4,opt,name=total_voting_power,json=totalVotingPower,proto3" json:"total_voting_power,omitempty"`
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *LightClientAttackEvidence) Reset() {
	*x = LightClientAttackEvidence{}
	mi := &file_tendermint_types_evidence_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightClientAttackEvidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightClientAttackEvidence) ProtoMessage() {}

func (x *LightClientAttackEvidence) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_evidence_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightClientAttackEvidence.ProtoReflect.Descriptor instead.
func (*LightClientAttackEvidence) Descriptor() ([]byte, []int) {
	return file_tendermint_types_evidence_proto_rawDescGZIP(), []int{2}
}

func (x *LightClientAttackEvidence) GetConflictingBlock() *LightBlock {
	if x != nil {
		return x.ConflictingBlock
	}
	return nil
}

func (x *LightClientAttackEvidence) GetCommonHeight() int64 {
	if x != nil {
		return x.CommonHeight
	}
	return 0
}

func (x *LightClientAttackEvidence) GetByzantineValidators() []*Validator {
	if x != nil {
		return x.ByzantineValidators
	}
	return nil
}

func (x *LightClientAttackEvidence) GetTotalVotingPower() int64 {
	if x != nil {
		return x.TotalVotingPower
	}
	return 0
}

func (x *LightClientAttackEvidence) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type EvidenceList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Evidence      []*Evidence            `protobuf:"bytes,1,rep,name=evidence,proto3" json:"evidence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvidenceList) Reset() {
	*x = EvidenceList{}
	mi := &file_tendermint_types_evidence_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvidenceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceList) ProtoMessage() {}

func (x *EvidenceList) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_evidence_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceList.ProtoReflect.Descriptor instead.
func (*EvidenceList) Descriptor() ([]byte, []int) {
	return file_tendermint_types_evidence_proto_rawDescGZIP(), []int{3}
}

func (x *EvidenceList) GetEvidence() []*Evidence {
	if x != nil {
		return x.Evidence
	}
	return nil
}

var File_tendermint_types_evidence_proto protoreflect.FileDescriptor

const file_tendermint_types_evidence_proto_rawDesc = "" +
	"\n" +
	"\x1ftendermint/types/evidence.proto\x12\x10tendermint.types\x1a\x14gogoproto/gogo.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1ctendermint/types/types.proto\x1a tendermint/types/validator.proto\"\xe4\x01\n" +
	"\bEvidence\x12a\n" +
	"\x17duplicate_vote_evidence\x18\x01 \x01(\v2'.tendermint.types.DuplicateVoteEvidenceH\x00R\x15duplicateVoteEvidence\x12n\n" +
	"\x1clight_client_attack_evidence\x18\x02 \x01(\v2+.tendermint.types.LightClientAttackEvidenceH\x00R\x19lightClientAttackEvidenceB\x05\n" +
	"\x03sum\"\x90\x02\n" +
	"\x15DuplicateVoteEvidence\x12-\n" +
	"\x06vote_a\x18\x01 \x01(\v2\x16.tendermint.types.VoteR\x05voteA\x12-\n" +
	"\x06vote_b\x18\x02 \x01(\v2\x16.tendermint.types.VoteR\x05voteB\x12,\n" +
	"\x12total_voting_power\x18\x03 \x01(\x03R\x10totalVotingPower\x12'\n" +
	"\x0fvalidator_power\x18\x04 \x01(\x03R\x0evalidatorPower\x12B\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\b\xc8\xde\x1f\x00\x90\xdf\x1f\x01R\ttimestamp\"\xcd\x02\n" +
	"\x19LightClientAttackEvidence\x12I\n" +
	"\x11conflicting_block\x18\x01 \x01(\v2\x1c.tendermint.types.LightBlockR\x10conflictingBlock\x12#\n" +
	"\rcommon_height\x18\x02 \x01(\x03R\fcommonHeight\x12N\n" +
	"\x14byzantine_validators\x18\x03 \x03(\v2\x1b.tendermint.types.ValidatorR\x13byzantineValidators\x12,\n" +
	"\x12total_voting_power\x18\x04 \x01(\x03R\x10totalVotingPower\x12B\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\b\xc8\xde\x1f\x00\x90\xdf\x1f\x01R\ttimestamp\"L\n" +
	"\fEvidenceList\x12<\n" +
	"\bevidence\x18\x01 \x03(\v2\x1a.tendermint.types.EvidenceB\x04\xc8\xde\x1f\x00R\bevidenceB\xc1\x01\n" +
	"\x14com.tendermint.typesB\rEvidenceProtoP\x01Z9github.com/fluentum-chain/fluentum/proto/tendermint/types\xa2\x02\x03TTX\xaa\x02\x10Tendermint.Types\xca\x02\x10Tendermint\\Types\xe2\x02\x1cTendermint\\Types\\GPBMetadata\xea\x02\x11Tendermint::Typesb\x06proto3"

var (
	file_tendermint_types_evidence_proto_rawDescOnce sync.Once
	file_tendermint_types_evidence_proto_rawDescData []byte
)

func file_tendermint_types_evidence_proto_rawDescGZIP() []byte {
	file_tendermint_types_evidence_proto_rawDescOnce.Do(func() {
		file_tendermint_types_evidence_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tendermint_types_evidence_proto_rawDesc), len(file_tendermint_types_evidence_proto_rawDesc)))
	})
	return file_tendermint_types_evidence_proto_rawDescData
}

var file_tendermint_types_evidence_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tendermint_types_evidence_proto_goTypes = []any{
	(*Evidence)(nil),                  // 0: tendermint.types.Evidence
	(*DuplicateVoteEvidence)(nil),     // 1: tendermint.types.DuplicateVoteEvidence
	(*LightClientAttackEvidence)(nil), // 2: tendermint.types.LightClientAttackEvidence
	(*EvidenceList)(nil),              // 3: tendermint.types.EvidenceList
	(*Vote)(nil),                      // 4: tendermint.types.Vote
	(*timestamppb.Timestamp)(nil),     // 5: google.protobuf.Timestamp
	(*LightBlock)(nil),                // 6: tendermint.types.LightBlock
	(*Validator)(nil),                 // 7: tendermint.types.Validator
}
var file_tendermint_types_evidence_proto_depIdxs = []int32{
	1, // 0: tendermint.types.Evidence.duplicate_vote_evidence:type_name -> tendermint.types.DuplicateVoteEvidence
	2, // 1: tendermint.types.Evidence.light_client_attack_evidence:type_name -> tendermint.types.LightClientAttackEvidence
	4, // 2: tendermint.types.DuplicateVoteEvidence.vote_a:type_name -> tendermint.types.Vote
	4, // 3: tendermint.types.DuplicateVoteEvidence.vote_b:type_name -> tendermint.types.Vote
	5, // 4: tendermint.types.DuplicateVoteEvidence.timestamp:type_name -> google.protobuf.Timestamp
	6, // 5: tendermint.types.LightClientAttackEvidence.conflicting_block:type_name -> tendermint.types.LightBlock
	7, // 6: tendermint.types.LightClientAttackEvidence.byzantine_validators:type_name -> tendermint.types.Validator
	5, // 7: tendermint.types.LightClientAttackEvidence.timestamp:type_name -> google.protobuf.Timestamp
	0, // 8: tendermint.types.EvidenceList.evidence:type_name -> tendermint.types.Evidence
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_tendermint_types_evidence_proto_init() }
func file_tendermint_types_evidence_proto_init() {
	if File_tendermint_types_evidence_proto != nil {
		return
	}
	file_tendermint_types_types_proto_init()
	file_tendermint_types_validator_proto_init()
	file_tendermint_types_evidence_proto_msgTypes[0].OneofWrappers = []any{
		(*Evidence_DuplicateVoteEvidence)(nil),
		(*Evidence_LightClientAttackEvidence)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tendermint_types_evidence_proto_rawDesc), len(file_tendermint_types_evidence_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tendermint_types_evidence_proto_goTypes,
		DependencyIndexes: file_tendermint_types_evidence_proto_depIdxs,
		MessageInfos:      file_tendermint_types_evidence_proto_msgTypes,
	}.Build()
	File_tendermint_types_evidence_proto = out.File
	file_tendermint_types_evidence_proto_goTypes = nil
	file_tendermint_types_evidence_proto_depIdxs = nil
}
