// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tendermint/types/types.proto

package types

import (
	_ "github.com/fluentum-chain/fluentum/proto/gogoproto"
	crypto "github.com/fluentum-chain/fluentum/proto/tendermint/crypto"
	version "github.com/fluentum-chain/fluentum/proto/tendermint/version"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BlockIdFlag indicates which BlcokID the signature is for
type BlockIDFlag int32

const (
	BlockIDFlag_BLOCK_ID_FLAG_UNKNOWN BlockIDFlag = 0
	BlockIDFlag_BLOCK_ID_FLAG_ABSENT  BlockIDFlag = 1
	BlockIDFlag_BLOCK_ID_FLAG_COMMIT  BlockIDFlag = 2
	BlockIDFlag_BLOCK_ID_FLAG_NIL     BlockIDFlag = 3
)

// Enum value maps for BlockIDFlag.
var (
	BlockIDFlag_name = map[int32]string{
		0: "BLOCK_ID_FLAG_UNKNOWN",
		1: "BLOCK_ID_FLAG_ABSENT",
		2: "BLOCK_ID_FLAG_COMMIT",
		3: "BLOCK_ID_FLAG_NIL",
	}
	BlockIDFlag_value = map[string]int32{
		"BLOCK_ID_FLAG_UNKNOWN": 0,
		"BLOCK_ID_FLAG_ABSENT":  1,
		"BLOCK_ID_FLAG_COMMIT":  2,
		"BLOCK_ID_FLAG_NIL":     3,
	}
)

func (x BlockIDFlag) Enum() *BlockIDFlag {
	p := new(BlockIDFlag)
	*p = x
	return p
}

func (x BlockIDFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockIDFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_tendermint_types_types_proto_enumTypes[0].Descriptor()
}

func (BlockIDFlag) Type() protoreflect.EnumType {
	return &file_tendermint_types_types_proto_enumTypes[0]
}

func (x BlockIDFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockIDFlag.Descriptor instead.
func (BlockIDFlag) EnumDescriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{0}
}

// SignedMsgType is a type of signed message in the consensus.
type SignedMsgType int32

const (
	SignedMsgType_SIGNED_MSG_TYPE_UNKNOWN SignedMsgType = 0
	// Votes
	SignedMsgType_SIGNED_MSG_TYPE_PREVOTE   SignedMsgType = 1
	SignedMsgType_SIGNED_MSG_TYPE_PRECOMMIT SignedMsgType = 2
	// Proposals
	SignedMsgType_SIGNED_MSG_TYPE_PROPOSAL SignedMsgType = 32
)

// Enum value maps for SignedMsgType.
var (
	SignedMsgType_name = map[int32]string{
		0:  "SIGNED_MSG_TYPE_UNKNOWN",
		1:  "SIGNED_MSG_TYPE_PREVOTE",
		2:  "SIGNED_MSG_TYPE_PRECOMMIT",
		32: "SIGNED_MSG_TYPE_PROPOSAL",
	}
	SignedMsgType_value = map[string]int32{
		"SIGNED_MSG_TYPE_UNKNOWN":   0,
		"SIGNED_MSG_TYPE_PREVOTE":   1,
		"SIGNED_MSG_TYPE_PRECOMMIT": 2,
		"SIGNED_MSG_TYPE_PROPOSAL":  32,
	}
)

func (x SignedMsgType) Enum() *SignedMsgType {
	p := new(SignedMsgType)
	*p = x
	return p
}

func (x SignedMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignedMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_tendermint_types_types_proto_enumTypes[1].Descriptor()
}

func (SignedMsgType) Type() protoreflect.EnumType {
	return &file_tendermint_types_types_proto_enumTypes[1]
}

func (x SignedMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignedMsgType.Descriptor instead.
func (SignedMsgType) EnumDescriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{1}
}

// PartsetHeader
type PartSetHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Hash          []byte                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartSetHeader) Reset() {
	*x = PartSetHeader{}
	mi := &file_tendermint_types_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartSetHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartSetHeader) ProtoMessage() {}

func (x *PartSetHeader) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartSetHeader.ProtoReflect.Descriptor instead.
func (*PartSetHeader) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{0}
}

func (x *PartSetHeader) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PartSetHeader) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Part struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         uint32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Bytes         []byte                 `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Proof         *crypto.Proof          `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Part) Reset() {
	*x = Part{}
	mi := &file_tendermint_types_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Part) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Part) ProtoMessage() {}

func (x *Part) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Part.ProtoReflect.Descriptor instead.
func (*Part) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{1}
}

func (x *Part) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Part) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *Part) GetProof() *crypto.Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

// BlockID
type BlockID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	PartSetHeader *PartSetHeader         `protobuf:"bytes,2,opt,name=part_set_header,json=partSetHeader,proto3" json:"part_set_header,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockID) Reset() {
	*x = BlockID{}
	mi := &file_tendermint_types_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockID) ProtoMessage() {}

func (x *BlockID) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockID.ProtoReflect.Descriptor instead.
func (*BlockID) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{2}
}

func (x *BlockID) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockID) GetPartSetHeader() *PartSetHeader {
	if x != nil {
		return x.PartSetHeader
	}
	return nil
}

// Header defines the structure of a Tendermint block header.
type Header struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// basic block info
	Version *version.Consensus     `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ChainId string                 `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height  int64                  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Time    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// prev block info
	LastBlockId *BlockID `protobuf:"bytes,5,opt,name=last_block_id,json=lastBlockId,proto3" json:"last_block_id,omitempty"`
	// hashes of block data
	LastCommitHash []byte `protobuf:"bytes,6,opt,name=last_commit_hash,json=lastCommitHash,proto3" json:"last_commit_hash,omitempty"` // commit from validators from the last block
	DataHash       []byte `protobuf:"bytes,7,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`                     // transactions
	// hashes from the app output from the prev block
	ValidatorsHash     []byte `protobuf:"bytes,8,opt,name=validators_hash,json=validatorsHash,proto3" json:"validators_hash,omitempty"`               // validators for the current block
	NextValidatorsHash []byte `protobuf:"bytes,9,opt,name=next_validators_hash,json=nextValidatorsHash,proto3" json:"next_validators_hash,omitempty"` // validators for the next block
	ConsensusHash      []byte `protobuf:"bytes,10,opt,name=consensus_hash,json=consensusHash,proto3" json:"consensus_hash,omitempty"`                 // consensus params for current block
	AppHash            []byte `protobuf:"bytes,11,opt,name=app_hash,json=appHash,proto3" json:"app_hash,omitempty"`                                   // state after txs from the previous block
	LastResultsHash    []byte `protobuf:"bytes,12,opt,name=last_results_hash,json=lastResultsHash,proto3" json:"last_results_hash,omitempty"`         // root hash of all results from the txs from the previous block
	// consensus info
	EvidenceHash    []byte `protobuf:"bytes,13,opt,name=evidence_hash,json=evidenceHash,proto3" json:"evidence_hash,omitempty"`          // evidence included in the block
	ProposerAddress []byte `protobuf:"bytes,14,opt,name=proposer_address,json=proposerAddress,proto3" json:"proposer_address,omitempty"` // original proposer of the block
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_tendermint_types_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{3}
}

func (x *Header) GetVersion() *version.Consensus {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Header) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *Header) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Header) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Header) GetLastBlockId() *BlockID {
	if x != nil {
		return x.LastBlockId
	}
	return nil
}

func (x *Header) GetLastCommitHash() []byte {
	if x != nil {
		return x.LastCommitHash
	}
	return nil
}

func (x *Header) GetDataHash() []byte {
	if x != nil {
		return x.DataHash
	}
	return nil
}

func (x *Header) GetValidatorsHash() []byte {
	if x != nil {
		return x.ValidatorsHash
	}
	return nil
}

func (x *Header) GetNextValidatorsHash() []byte {
	if x != nil {
		return x.NextValidatorsHash
	}
	return nil
}

func (x *Header) GetConsensusHash() []byte {
	if x != nil {
		return x.ConsensusHash
	}
	return nil
}

func (x *Header) GetAppHash() []byte {
	if x != nil {
		return x.AppHash
	}
	return nil
}

func (x *Header) GetLastResultsHash() []byte {
	if x != nil {
		return x.LastResultsHash
	}
	return nil
}

func (x *Header) GetEvidenceHash() []byte {
	if x != nil {
		return x.EvidenceHash
	}
	return nil
}

func (x *Header) GetProposerAddress() []byte {
	if x != nil {
		return x.ProposerAddress
	}
	return nil
}

// Data contains the set of transactions included in the block
type Data struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Txs that will be applied by state @ block.Height+1.
	// NOTE: not all txs here are valid.  We're just agreeing on the order first.
	// This means that block.AppHash does not include these txs.
	Txs           [][]byte `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_tendermint_types_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{4}
}

func (x *Data) GetTxs() [][]byte {
	if x != nil {
		return x.Txs
	}
	return nil
}

// Vote represents a prevote, precommit, or commit vote from validators for
// consensus.
type Vote struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Type             SignedMsgType          `protobuf:"varint,1,opt,name=type,proto3,enum=tendermint.types.SignedMsgType" json:"type,omitempty"`
	Height           int64                  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Round            int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	BlockId          *BlockID               `protobuf:"bytes,4,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"` // zero if vote is nil.
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ValidatorAddress []byte                 `protobuf:"bytes,6,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	ValidatorIndex   int32                  `protobuf:"varint,7,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Signature        []byte                 `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Vote) Reset() {
	*x = Vote{}
	mi := &file_tendermint_types_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{5}
}

func (x *Vote) GetType() SignedMsgType {
	if x != nil {
		return x.Type
	}
	return SignedMsgType_SIGNED_MSG_TYPE_UNKNOWN
}

func (x *Vote) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Vote) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Vote) GetBlockId() *BlockID {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *Vote) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Vote) GetValidatorAddress() []byte {
	if x != nil {
		return x.ValidatorAddress
	}
	return nil
}

func (x *Vote) GetValidatorIndex() int32 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *Vote) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Commit contains the evidence that a block was committed by a set of validators.
type Commit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        int64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round         int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	BlockId       *BlockID               `protobuf:"bytes,3,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Signatures    []*CommitSig           `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Commit) Reset() {
	*x = Commit{}
	mi := &file_tendermint_types_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{6}
}

func (x *Commit) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Commit) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Commit) GetBlockId() *BlockID {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *Commit) GetSignatures() []*CommitSig {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// CommitSig is a part of the Vote included in a Commit.
type CommitSig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BlockIdFlag      BlockIDFlag            `protobuf:"varint,1,opt,name=block_id_flag,json=blockIdFlag,proto3,enum=tendermint.types.BlockIDFlag" json:"block_id_flag,omitempty"`
	ValidatorAddress []byte                 `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature        []byte                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CommitSig) Reset() {
	*x = CommitSig{}
	mi := &file_tendermint_types_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitSig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitSig) ProtoMessage() {}

func (x *CommitSig) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitSig.ProtoReflect.Descriptor instead.
func (*CommitSig) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{7}
}

func (x *CommitSig) GetBlockIdFlag() BlockIDFlag {
	if x != nil {
		return x.BlockIdFlag
	}
	return BlockIDFlag_BLOCK_ID_FLAG_UNKNOWN
}

func (x *CommitSig) GetValidatorAddress() []byte {
	if x != nil {
		return x.ValidatorAddress
	}
	return nil
}

func (x *CommitSig) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CommitSig) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Proposal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          SignedMsgType          `protobuf:"varint,1,opt,name=type,proto3,enum=tendermint.types.SignedMsgType" json:"type,omitempty"`
	Height        int64                  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Round         int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	PolRound      int32                  `protobuf:"varint,4,opt,name=pol_round,json=polRound,proto3" json:"pol_round,omitempty"`
	BlockId       *BlockID               `protobuf:"bytes,5,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature     []byte                 `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	mi := &file_tendermint_types_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{8}
}

func (x *Proposal) GetType() SignedMsgType {
	if x != nil {
		return x.Type
	}
	return SignedMsgType_SIGNED_MSG_TYPE_UNKNOWN
}

func (x *Proposal) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Proposal) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Proposal) GetPolRound() int32 {
	if x != nil {
		return x.PolRound
	}
	return 0
}

func (x *Proposal) GetBlockId() *BlockID {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *Proposal) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Proposal) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SignedHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *Header                `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Commit        *Commit                `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedHeader) Reset() {
	*x = SignedHeader{}
	mi := &file_tendermint_types_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedHeader) ProtoMessage() {}

func (x *SignedHeader) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedHeader.ProtoReflect.Descriptor instead.
func (*SignedHeader) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{9}
}

func (x *SignedHeader) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SignedHeader) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type LightBlock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SignedHeader  *SignedHeader          `protobuf:"bytes,1,opt,name=signed_header,json=signedHeader,proto3" json:"signed_header,omitempty"`
	ValidatorSet  *ValidatorSet          `protobuf:"bytes,2,opt,name=validator_set,json=validatorSet,proto3" json:"validator_set,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LightBlock) Reset() {
	*x = LightBlock{}
	mi := &file_tendermint_types_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LightBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightBlock) ProtoMessage() {}

func (x *LightBlock) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightBlock.ProtoReflect.Descriptor instead.
func (*LightBlock) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{10}
}

func (x *LightBlock) GetSignedHeader() *SignedHeader {
	if x != nil {
		return x.SignedHeader
	}
	return nil
}

func (x *LightBlock) GetValidatorSet() *ValidatorSet {
	if x != nil {
		return x.ValidatorSet
	}
	return nil
}

type BlockMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockId       *BlockID               `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	BlockSize     int64                  `protobuf:"varint,2,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	Header        *Header                `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	NumTxs        int64                  `protobuf:"varint,4,opt,name=num_txs,json=numTxs,proto3" json:"num_txs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockMeta) Reset() {
	*x = BlockMeta{}
	mi := &file_tendermint_types_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMeta) ProtoMessage() {}

func (x *BlockMeta) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMeta.ProtoReflect.Descriptor instead.
func (*BlockMeta) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{11}
}

func (x *BlockMeta) GetBlockId() *BlockID {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *BlockMeta) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *BlockMeta) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockMeta) GetNumTxs() int64 {
	if x != nil {
		return x.NumTxs
	}
	return 0
}

// TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
type TxProof struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RootHash      []byte                 `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Proof         *crypto.Proof          `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxProof) Reset() {
	*x = TxProof{}
	mi := &file_tendermint_types_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxProof) ProtoMessage() {}

func (x *TxProof) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_types_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxProof.ProtoReflect.Descriptor instead.
func (*TxProof) Descriptor() ([]byte, []int) {
	return file_tendermint_types_types_proto_rawDescGZIP(), []int{12}
}

func (x *TxProof) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *TxProof) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TxProof) GetProof() *crypto.Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

var File_tendermint_types_types_proto protoreflect.FileDescriptor

const file_tendermint_types_types_proto_rawDesc = "" +
	"\n" +
	"\x1ctendermint/types/types.proto\x12\x10tendermint.types\x1a\x14gogoproto/gogo.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1dtendermint/crypto/proof.proto\x1a\x1etendermint/version/types.proto\x1a tendermint/types/validator.proto\"9\n" +
	"\rPartSetHeader\x12\x14\n" +
	"\x05total\x18\x01 \x01(\rR\x05total\x12\x12\n" +
	"\x04hash\x18\x02 \x01(\fR\x04hash\"h\n" +
	"\x04Part\x12\x14\n" +
	"\x05index\x18\x01 \x01(\rR\x05index\x12\x14\n" +
	"\x05bytes\x18\x02 \x01(\fR\x05bytes\x124\n" +
	"\x05proof\x18\x03 \x01(\v2\x18.tendermint.crypto.ProofB\x04\xc8\xde\x1f\x00R\x05proof\"l\n" +
	"\aBlockID\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\fR\x04hash\x12M\n" +
	"\x0fpart_set_header\x18\x02 \x01(\v2\x1f.tendermint.types.PartSetHeaderB\x04\xc8\xde\x1f\x00R\rpartSetHeader\"\xe6\x04\n" +
	"\x06Header\x12=\n" +
	"\aversion\x18\x01 \x01(\v2\x1d.tendermint.version.ConsensusB\x04\xc8\xde\x1f\x00R\aversion\x12&\n" +
	"\bchain_id\x18\x02 \x01(\tB\v\xe2\xde\x1f\aChainIDR\achainId\x12\x16\n" +
	"\x06height\x18\x03 \x01(\x03R\x06height\x128\n" +
	"\x04time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\b\xc8\xde\x1f\x00\x90\xdf\x1f\x01R\x04time\x12C\n" +
	"\rlast_block_id\x18\x05 \x01(\v2\x19.tendermint.types.BlockIDB\x04\xc8\xde\x1f\x00R\vlastBlockId\x12(\n" +
	"\x10last_commit_hash\x18\x06 \x01(\fR\x0elastCommitHash\x12\x1b\n" +
	"\tdata_hash\x18\a \x01(\fR\bdataHash\x12'\n" +
	"\x0fvalidators_hash\x18\b \x01(\fR\x0evalidatorsHash\x120\n" +
	"\x14next_validators_hash\x18\t \x01(\fR\x12nextValidatorsHash\x12%\n" +
	"\x0econsensus_hash\x18\n" +
	" \x01(\fR\rconsensusHash\x12\x19\n" +
	"\bapp_hash\x18\v \x01(\fR\aappHash\x12*\n" +
	"\x11last_results_hash\x18\f \x01(\fR\x0flastResultsHash\x12#\n" +
	"\revidence_hash\x18\r \x01(\fR\fevidenceHash\x12)\n" +
	"\x10proposer_address\x18\x0e \x01(\fR\x0fproposerAddress\"\x18\n" +
	"\x04Data\x12\x10\n" +
	"\x03txs\x18\x01 \x03(\fR\x03txs\"\xe8\x02\n" +
	"\x04Vote\x123\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1f.tendermint.types.SignedMsgTypeR\x04type\x12\x16\n" +
	"\x06height\x18\x02 \x01(\x03R\x06height\x12\x14\n" +
	"\x05round\x18\x03 \x01(\x05R\x05round\x12E\n" +
	"\bblock_id\x18\x04 \x01(\v2\x19.tendermint.types.BlockIDB\x0f\xc8\xde\x1f\x00\xe2\xde\x1f\aBlockIDR\ablockId\x12B\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\b\xc8\xde\x1f\x00\x90\xdf\x1f\x01R\ttimestamp\x12+\n" +
	"\x11validator_address\x18\x06 \x01(\fR\x10validatorAddress\x12'\n" +
	"\x0fvalidator_index\x18\a \x01(\x05R\x0evalidatorIndex\x12\x1c\n" +
	"\tsignature\x18\b \x01(\fR\tsignature\"\xc0\x01\n" +
	"\x06Commit\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x03R\x06height\x12\x14\n" +
	"\x05round\x18\x02 \x01(\x05R\x05round\x12E\n" +
	"\bblock_id\x18\x03 \x01(\v2\x19.tendermint.types.BlockIDB\x0f\xc8\xde\x1f\x00\xe2\xde\x1f\aBlockIDR\ablockId\x12A\n" +
	"\n" +
	"signatures\x18\x04 \x03(\v2\x1b.tendermint.types.CommitSigB\x04\xc8\xde\x1f\x00R\n" +
	"signatures\"\xdd\x01\n" +
	"\tCommitSig\x12A\n" +
	"\rblock_id_flag\x18\x01 \x01(\x0e2\x1d.tendermint.types.BlockIDFlagR\vblockIdFlag\x12+\n" +
	"\x11validator_address\x18\x02 \x01(\fR\x10validatorAddress\x12B\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\b\xc8\xde\x1f\x00\x90\xdf\x1f\x01R\ttimestamp\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignature\"\xb3\x02\n" +
	"\bProposal\x123\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1f.tendermint.types.SignedMsgTypeR\x04type\x12\x16\n" +
	"\x06height\x18\x02 \x01(\x03R\x06height\x12\x14\n" +
	"\x05round\x18\x03 \x01(\x05R\x05round\x12\x1b\n" +
	"\tpol_round\x18\x04 \x01(\x05R\bpolRound\x12E\n" +
	"\bblock_id\x18\x05 \x01(\v2\x19.tendermint.types.BlockIDB\x0f\xc8\xde\x1f\x00\xe2\xde\x1f\aBlockIDR\ablockId\x12B\n" +
	"\ttimestamp\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\b\xc8\xde\x1f\x00\x90\xdf\x1f\x01R\ttimestamp\x12\x1c\n" +
	"\tsignature\x18\a \x01(\fR\tsignature\"r\n" +
	"\fSignedHeader\x120\n" +
	"\x06header\x18\x01 \x01(\v2\x18.tendermint.types.HeaderR\x06header\x120\n" +
	"\x06commit\x18\x02 \x01(\v2\x18.tendermint.types.CommitR\x06commit\"\x96\x01\n" +
	"\n" +
	"LightBlock\x12C\n" +
	"\rsigned_header\x18\x01 \x01(\v2\x1e.tendermint.types.SignedHeaderR\fsignedHeader\x12C\n" +
	"\rvalidator_set\x18\x02 \x01(\v2\x1e.tendermint.types.ValidatorSetR\fvalidatorSet\"\xc2\x01\n" +
	"\tBlockMeta\x12E\n" +
	"\bblock_id\x18\x01 \x01(\v2\x19.tendermint.types.BlockIDB\x0f\xc8\xde\x1f\x00\xe2\xde\x1f\aBlockIDR\ablockId\x12\x1d\n" +
	"\n" +
	"block_size\x18\x02 \x01(\x03R\tblockSize\x126\n" +
	"\x06header\x18\x03 \x01(\v2\x18.tendermint.types.HeaderB\x04\xc8\xde\x1f\x00R\x06header\x12\x17\n" +
	"\anum_txs\x18\x04 \x01(\x03R\x06numTxs\"j\n" +
	"\aTxProof\x12\x1b\n" +
	"\troot_hash\x18\x01 \x01(\fR\brootHash\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12.\n" +
	"\x05proof\x18\x03 \x01(\v2\x18.tendermint.crypto.ProofR\x05proof*\xd7\x01\n" +
	"\vBlockIDFlag\x121\n" +
	"\x15BLOCK_ID_FLAG_UNKNOWN\x10\x00\x1a\x16\x8a\x9d \x12BlockIDFlagUnknown\x12/\n" +
	"\x14BLOCK_ID_FLAG_ABSENT\x10\x01\x1a\x15\x8a\x9d \x11BlockIDFlagAbsent\x12/\n" +
	"\x14BLOCK_ID_FLAG_COMMIT\x10\x02\x1a\x15\x8a\x9d \x11BlockIDFlagCommit\x12)\n" +
	"\x11BLOCK_ID_FLAG_NIL\x10\x03\x1a\x12\x8a\x9d \x0eBlockIDFlagNil\x1a\b\x88\xa3\x1e\x00\xa8\xa4\x1e\x01*\xd7\x01\n" +
	"\rSignedMsgType\x12,\n" +
	"\x17SIGNED_MSG_TYPE_UNKNOWN\x10\x00\x1a\x0f\x8a\x9d \vUnknownType\x12,\n" +
	"\x17SIGNED_MSG_TYPE_PREVOTE\x10\x01\x1a\x0f\x8a\x9d \vPrevoteType\x120\n" +
	"\x19SIGNED_MSG_TYPE_PRECOMMIT\x10\x02\x1a\x11\x8a\x9d \rPrecommitType\x12.\n" +
	"\x18SIGNED_MSG_TYPE_PROPOSAL\x10 \x1a\x10\x8a\x9d \fProposalType\x1a\b\x88\xa3\x1e\x00\xa8\xa4\x1e\x01B\xbe\x01\n" +
	"\x14com.tendermint.typesB\n" +
	"TypesProtoP\x01Z9github.com/fluentum-chain/fluentum/proto/tendermint/types\xa2\x02\x03TTX\xaa\x02\x10Tendermint.Types\xca\x02\x10Tendermint\\Types\xe2\x02\x1cTendermint\\Types\\GPBMetadata\xea\x02\x11Tendermint::Typesb\x06proto3"

var (
	file_tendermint_types_types_proto_rawDescOnce sync.Once
	file_tendermint_types_types_proto_rawDescData []byte
)

func file_tendermint_types_types_proto_rawDescGZIP() []byte {
	file_tendermint_types_types_proto_rawDescOnce.Do(func() {
		file_tendermint_types_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tendermint_types_types_proto_rawDesc), len(file_tendermint_types_types_proto_rawDesc)))
	})
	return file_tendermint_types_types_proto_rawDescData
}

var file_tendermint_types_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tendermint_types_types_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_tendermint_types_types_proto_goTypes = []any{
	(BlockIDFlag)(0),              // 0: tendermint.types.BlockIDFlag
	(SignedMsgType)(0),            // 1: tendermint.types.SignedMsgType
	(*PartSetHeader)(nil),         // 2: tendermint.types.PartSetHeader
	(*Part)(nil),                  // 3: tendermint.types.Part
	(*BlockID)(nil),               // 4: tendermint.types.BlockID
	(*Header)(nil),                // 5: tendermint.types.Header
	(*Data)(nil),                  // 6: tendermint.types.Data
	(*Vote)(nil),                  // 7: tendermint.types.Vote
	(*Commit)(nil),                // 8: tendermint.types.Commit
	(*CommitSig)(nil),             // 9: tendermint.types.CommitSig
	(*Proposal)(nil),              // 10: tendermint.types.Proposal
	(*SignedHeader)(nil),          // 11: tendermint.types.SignedHeader
	(*LightBlock)(nil),            // 12: tendermint.types.LightBlock
	(*BlockMeta)(nil),             // 13: tendermint.types.BlockMeta
	(*TxProof)(nil),               // 14: tendermint.types.TxProof
	(*crypto.Proof)(nil),          // 15: tendermint.crypto.Proof
	(*version.Consensus)(nil),     // 16: tendermint.version.Consensus
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
	(*ValidatorSet)(nil),          // 18: tendermint.types.ValidatorSet
}
var file_tendermint_types_types_proto_depIdxs = []int32{
	15, // 0: tendermint.types.Part.proof:type_name -> tendermint.crypto.Proof
	2,  // 1: tendermint.types.BlockID.part_set_header:type_name -> tendermint.types.PartSetHeader
	16, // 2: tendermint.types.Header.version:type_name -> tendermint.version.Consensus
	17, // 3: tendermint.types.Header.time:type_name -> google.protobuf.Timestamp
	4,  // 4: tendermint.types.Header.last_block_id:type_name -> tendermint.types.BlockID
	1,  // 5: tendermint.types.Vote.type:type_name -> tendermint.types.SignedMsgType
	4,  // 6: tendermint.types.Vote.block_id:type_name -> tendermint.types.BlockID
	17, // 7: tendermint.types.Vote.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 8: tendermint.types.Commit.block_id:type_name -> tendermint.types.BlockID
	9,  // 9: tendermint.types.Commit.signatures:type_name -> tendermint.types.CommitSig
	0,  // 10: tendermint.types.CommitSig.block_id_flag:type_name -> tendermint.types.BlockIDFlag
	17, // 11: tendermint.types.CommitSig.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 12: tendermint.types.Proposal.type:type_name -> tendermint.types.SignedMsgType
	4,  // 13: tendermint.types.Proposal.block_id:type_name -> tendermint.types.BlockID
	17, // 14: tendermint.types.Proposal.timestamp:type_name -> google.protobuf.Timestamp
	5,  // 15: tendermint.types.SignedHeader.header:type_name -> tendermint.types.Header
	8,  // 16: tendermint.types.SignedHeader.commit:type_name -> tendermint.types.Commit
	11, // 17: tendermint.types.LightBlock.signed_header:type_name -> tendermint.types.SignedHeader
	18, // 18: tendermint.types.LightBlock.validator_set:type_name -> tendermint.types.ValidatorSet
	4,  // 19: tendermint.types.BlockMeta.block_id:type_name -> tendermint.types.BlockID
	5,  // 20: tendermint.types.BlockMeta.header:type_name -> tendermint.types.Header
	15, // 21: tendermint.types.TxProof.proof:type_name -> tendermint.crypto.Proof
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_tendermint_types_types_proto_init() }
func file_tendermint_types_types_proto_init() {
	if File_tendermint_types_types_proto != nil {
		return
	}
	file_tendermint_types_validator_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tendermint_types_types_proto_rawDesc), len(file_tendermint_types_types_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tendermint_types_types_proto_goTypes,
		DependencyIndexes: file_tendermint_types_types_proto_depIdxs,
		EnumInfos:         file_tendermint_types_types_proto_enumTypes,
		MessageInfos:      file_tendermint_types_types_proto_msgTypes,
	}.Build()
	File_tendermint_types_types_proto = out.File
	file_tendermint_types_types_proto_goTypes = nil
	file_tendermint_types_types_proto_depIdxs = nil
}
