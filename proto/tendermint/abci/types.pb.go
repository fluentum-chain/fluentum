// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tendermint/abci/types.proto

package abci

import (
	_ "github.com/fluentum-chain/fluentum/proto/gogoproto"
	crypto "github.com/fluentum-chain/fluentum/proto/tendermint/crypto"
	types "github.com/fluentum-chain/fluentum/proto/tendermint/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckTxType int32

const (
	CheckTxType_NEW     CheckTxType = 0
	CheckTxType_RECHECK CheckTxType = 1
)

// Enum value maps for CheckTxType.
var (
	CheckTxType_name = map[int32]string{
		0: "NEW",
		1: "RECHECK",
	}
	CheckTxType_value = map[string]int32{
		"NEW":     0,
		"RECHECK": 1,
	}
)

func (x CheckTxType) Enum() *CheckTxType {
	p := new(CheckTxType)
	*p = x
	return p
}

func (x CheckTxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckTxType) Descriptor() protoreflect.EnumDescriptor {
	return file_tendermint_abci_types_proto_enumTypes[0].Descriptor()
}

func (CheckTxType) Type() protoreflect.EnumType {
	return &file_tendermint_abci_types_proto_enumTypes[0]
}

func (x CheckTxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckTxType.Descriptor instead.
func (CheckTxType) EnumDescriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{0}
}

type EvidenceType int32

const (
	EvidenceType_UNKNOWN             EvidenceType = 0
	EvidenceType_DUPLICATE_VOTE      EvidenceType = 1
	EvidenceType_LIGHT_CLIENT_ATTACK EvidenceType = 2
)

// Enum value maps for EvidenceType.
var (
	EvidenceType_name = map[int32]string{
		0: "UNKNOWN",
		1: "DUPLICATE_VOTE",
		2: "LIGHT_CLIENT_ATTACK",
	}
	EvidenceType_value = map[string]int32{
		"UNKNOWN":             0,
		"DUPLICATE_VOTE":      1,
		"LIGHT_CLIENT_ATTACK": 2,
	}
)

func (x EvidenceType) Enum() *EvidenceType {
	p := new(EvidenceType)
	*p = x
	return p
}

func (x EvidenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvidenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_tendermint_abci_types_proto_enumTypes[1].Descriptor()
}

func (EvidenceType) Type() protoreflect.EnumType {
	return &file_tendermint_abci_types_proto_enumTypes[1]
}

func (x EvidenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvidenceType.Descriptor instead.
func (EvidenceType) EnumDescriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{1}
}

type ResponseOfferSnapshot_Result int32

const (
	ResponseOfferSnapshot_UNKNOWN       ResponseOfferSnapshot_Result = 0 // Unknown result, abort all snapshot restoration
	ResponseOfferSnapshot_ACCEPT        ResponseOfferSnapshot_Result = 1 // Snapshot accepted, apply chunks
	ResponseOfferSnapshot_ABORT         ResponseOfferSnapshot_Result = 2 // Abort all snapshot restoration
	ResponseOfferSnapshot_REJECT        ResponseOfferSnapshot_Result = 3 // Reject this specific snapshot, try others
	ResponseOfferSnapshot_REJECT_FORMAT ResponseOfferSnapshot_Result = 4 // Reject all snapshots of this format, try others
	ResponseOfferSnapshot_REJECT_SENDER ResponseOfferSnapshot_Result = 5 // Reject all snapshots from the sender(s), try others
)

// Enum value maps for ResponseOfferSnapshot_Result.
var (
	ResponseOfferSnapshot_Result_name = map[int32]string{
		0: "UNKNOWN",
		1: "ACCEPT",
		2: "ABORT",
		3: "REJECT",
		4: "REJECT_FORMAT",
		5: "REJECT_SENDER",
	}
	ResponseOfferSnapshot_Result_value = map[string]int32{
		"UNKNOWN":       0,
		"ACCEPT":        1,
		"ABORT":         2,
		"REJECT":        3,
		"REJECT_FORMAT": 4,
		"REJECT_SENDER": 5,
	}
)

func (x ResponseOfferSnapshot_Result) Enum() *ResponseOfferSnapshot_Result {
	p := new(ResponseOfferSnapshot_Result)
	*p = x
	return p
}

func (x ResponseOfferSnapshot_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseOfferSnapshot_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tendermint_abci_types_proto_enumTypes[2].Descriptor()
}

func (ResponseOfferSnapshot_Result) Type() protoreflect.EnumType {
	return &file_tendermint_abci_types_proto_enumTypes[2]
}

func (x ResponseOfferSnapshot_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseOfferSnapshot_Result.Descriptor instead.
func (ResponseOfferSnapshot_Result) EnumDescriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{21, 0}
}

type ResponseApplySnapshotChunk_Result int32

const (
	ResponseApplySnapshotChunk_UNKNOWN         ResponseApplySnapshotChunk_Result = 0 // Unknown result, abort all snapshot restoration
	ResponseApplySnapshotChunk_ACCEPT          ResponseApplySnapshotChunk_Result = 1 // Chunk successfully accepted
	ResponseApplySnapshotChunk_ABORT           ResponseApplySnapshotChunk_Result = 2 // Abort all snapshot restoration
	ResponseApplySnapshotChunk_RETRY           ResponseApplySnapshotChunk_Result = 3 // Retry chunk (combine with refetch and reject)
	ResponseApplySnapshotChunk_RETRY_SNAPSHOT  ResponseApplySnapshotChunk_Result = 4 // Retry snapshot (combine with refetch and reject)
	ResponseApplySnapshotChunk_REJECT_SNAPSHOT ResponseApplySnapshotChunk_Result = 5 // Reject this snapshot, try others
)

// Enum value maps for ResponseApplySnapshotChunk_Result.
var (
	ResponseApplySnapshotChunk_Result_name = map[int32]string{
		0: "UNKNOWN",
		1: "ACCEPT",
		2: "ABORT",
		3: "RETRY",
		4: "RETRY_SNAPSHOT",
		5: "REJECT_SNAPSHOT",
	}
	ResponseApplySnapshotChunk_Result_value = map[string]int32{
		"UNKNOWN":         0,
		"ACCEPT":          1,
		"ABORT":           2,
		"RETRY":           3,
		"RETRY_SNAPSHOT":  4,
		"REJECT_SNAPSHOT": 5,
	}
)

func (x ResponseApplySnapshotChunk_Result) Enum() *ResponseApplySnapshotChunk_Result {
	p := new(ResponseApplySnapshotChunk_Result)
	*p = x
	return p
}

func (x ResponseApplySnapshotChunk_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseApplySnapshotChunk_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_tendermint_abci_types_proto_enumTypes[3].Descriptor()
}

func (ResponseApplySnapshotChunk_Result) Type() protoreflect.EnumType {
	return &file_tendermint_abci_types_proto_enumTypes[3]
}

func (x ResponseApplySnapshotChunk_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseApplySnapshotChunk_Result.Descriptor instead.
func (ResponseApplySnapshotChunk_Result) EnumDescriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{23, 0}
}

type Request struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Request_Echo
	//	*Request_Flush
	//	*Request_Info
	//	*Request_SetOption
	//	*Request_InitChain
	//	*Request_Query
	//	*Request_CheckTx
	//	*Request_ListSnapshots
	//	*Request_OfferSnapshot
	//	*Request_LoadSnapshotChunk
	//	*Request_ApplySnapshotChunk
	Value         isRequest_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Request) Reset() {
	*x = Request{}
	mi := &file_tendermint_abci_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetValue() isRequest_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Request) GetEcho() *RequestEcho {
	if x != nil {
		if x, ok := x.Value.(*Request_Echo); ok {
			return x.Echo
		}
	}
	return nil
}

func (x *Request) GetFlush() *RequestFlush {
	if x != nil {
		if x, ok := x.Value.(*Request_Flush); ok {
			return x.Flush
		}
	}
	return nil
}

func (x *Request) GetInfo() *RequestInfo {
	if x != nil {
		if x, ok := x.Value.(*Request_Info); ok {
			return x.Info
		}
	}
	return nil
}

func (x *Request) GetSetOption() *RequestSetOption {
	if x != nil {
		if x, ok := x.Value.(*Request_SetOption); ok {
			return x.SetOption
		}
	}
	return nil
}

func (x *Request) GetInitChain() *RequestInitChain {
	if x != nil {
		if x, ok := x.Value.(*Request_InitChain); ok {
			return x.InitChain
		}
	}
	return nil
}

func (x *Request) GetQuery() *RequestQuery {
	if x != nil {
		if x, ok := x.Value.(*Request_Query); ok {
			return x.Query
		}
	}
	return nil
}

func (x *Request) GetCheckTx() *RequestCheckTx {
	if x != nil {
		if x, ok := x.Value.(*Request_CheckTx); ok {
			return x.CheckTx
		}
	}
	return nil
}

func (x *Request) GetListSnapshots() *RequestListSnapshots {
	if x != nil {
		if x, ok := x.Value.(*Request_ListSnapshots); ok {
			return x.ListSnapshots
		}
	}
	return nil
}

func (x *Request) GetOfferSnapshot() *RequestOfferSnapshot {
	if x != nil {
		if x, ok := x.Value.(*Request_OfferSnapshot); ok {
			return x.OfferSnapshot
		}
	}
	return nil
}

func (x *Request) GetLoadSnapshotChunk() *RequestLoadSnapshotChunk {
	if x != nil {
		if x, ok := x.Value.(*Request_LoadSnapshotChunk); ok {
			return x.LoadSnapshotChunk
		}
	}
	return nil
}

func (x *Request) GetApplySnapshotChunk() *RequestApplySnapshotChunk {
	if x != nil {
		if x, ok := x.Value.(*Request_ApplySnapshotChunk); ok {
			return x.ApplySnapshotChunk
		}
	}
	return nil
}

type isRequest_Value interface {
	isRequest_Value()
}

type Request_Echo struct {
	Echo *RequestEcho `protobuf:"bytes,1,opt,name=echo,proto3,oneof"`
}

type Request_Flush struct {
	Flush *RequestFlush `protobuf:"bytes,2,opt,name=flush,proto3,oneof"`
}

type Request_Info struct {
	Info *RequestInfo `protobuf:"bytes,3,opt,name=info,proto3,oneof"`
}

type Request_SetOption struct {
	SetOption *RequestSetOption `protobuf:"bytes,4,opt,name=set_option,json=setOption,proto3,oneof"`
}

type Request_InitChain struct {
	InitChain *RequestInitChain `protobuf:"bytes,5,opt,name=init_chain,json=initChain,proto3,oneof"`
}

type Request_Query struct {
	Query *RequestQuery `protobuf:"bytes,6,opt,name=query,proto3,oneof"`
}

type Request_CheckTx struct {
	CheckTx *RequestCheckTx `protobuf:"bytes,8,opt,name=check_tx,json=checkTx,proto3,oneof"`
}

type Request_ListSnapshots struct {
	ListSnapshots *RequestListSnapshots `protobuf:"bytes,12,opt,name=list_snapshots,json=listSnapshots,proto3,oneof"`
}

type Request_OfferSnapshot struct {
	OfferSnapshot *RequestOfferSnapshot `protobuf:"bytes,13,opt,name=offer_snapshot,json=offerSnapshot,proto3,oneof"`
}

type Request_LoadSnapshotChunk struct {
	LoadSnapshotChunk *RequestLoadSnapshotChunk `protobuf:"bytes,14,opt,name=load_snapshot_chunk,json=loadSnapshotChunk,proto3,oneof"`
}

type Request_ApplySnapshotChunk struct {
	ApplySnapshotChunk *RequestApplySnapshotChunk `protobuf:"bytes,15,opt,name=apply_snapshot_chunk,json=applySnapshotChunk,proto3,oneof"`
}

func (*Request_Echo) isRequest_Value() {}

func (*Request_Flush) isRequest_Value() {}

func (*Request_Info) isRequest_Value() {}

func (*Request_SetOption) isRequest_Value() {}

func (*Request_InitChain) isRequest_Value() {}

func (*Request_Query) isRequest_Value() {}

func (*Request_CheckTx) isRequest_Value() {}

func (*Request_ListSnapshots) isRequest_Value() {}

func (*Request_OfferSnapshot) isRequest_Value() {}

func (*Request_LoadSnapshotChunk) isRequest_Value() {}

func (*Request_ApplySnapshotChunk) isRequest_Value() {}

type RequestEcho struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestEcho) Reset() {
	*x = RequestEcho{}
	mi := &file_tendermint_abci_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestEcho) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEcho) ProtoMessage() {}

func (x *RequestEcho) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestEcho.ProtoReflect.Descriptor instead.
func (*RequestEcho) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{1}
}

func (x *RequestEcho) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RequestFlush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestFlush) Reset() {
	*x = RequestFlush{}
	mi := &file_tendermint_abci_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestFlush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFlush) ProtoMessage() {}

func (x *RequestFlush) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFlush.ProtoReflect.Descriptor instead.
func (*RequestFlush) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{2}
}

type RequestInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	BlockVersion  uint64                 `protobuf:"varint,2,opt,name=block_version,json=blockVersion,proto3" json:"block_version,omitempty"`
	P2PVersion    uint64                 `protobuf:"varint,3,opt,name=p2p_version,json=p2pVersion,proto3" json:"p2p_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestInfo) Reset() {
	*x = RequestInfo{}
	mi := &file_tendermint_abci_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInfo) ProtoMessage() {}

func (x *RequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInfo.ProtoReflect.Descriptor instead.
func (*RequestInfo) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{3}
}

func (x *RequestInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RequestInfo) GetBlockVersion() uint64 {
	if x != nil {
		return x.BlockVersion
	}
	return 0
}

func (x *RequestInfo) GetP2PVersion() uint64 {
	if x != nil {
		return x.P2PVersion
	}
	return 0
}

// nondeterministic
type RequestSetOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestSetOption) Reset() {
	*x = RequestSetOption{}
	mi := &file_tendermint_abci_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestSetOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSetOption) ProtoMessage() {}

func (x *RequestSetOption) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSetOption.ProtoReflect.Descriptor instead.
func (*RequestSetOption) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{4}
}

func (x *RequestSetOption) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RequestSetOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RequestInitChain struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Time            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	ChainId         string                 `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ConsensusParams *ConsensusParams       `protobuf:"bytes,3,opt,name=consensus_params,json=consensusParams,proto3" json:"consensus_params,omitempty"`
	Validators      []*ValidatorUpdate     `protobuf:"bytes,4,rep,name=validators,proto3" json:"validators,omitempty"`
	AppStateBytes   []byte                 `protobuf:"bytes,5,opt,name=app_state_bytes,json=appStateBytes,proto3" json:"app_state_bytes,omitempty"`
	InitialHeight   int64                  `protobuf:"varint,6,opt,name=initial_height,json=initialHeight,proto3" json:"initial_height,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RequestInitChain) Reset() {
	*x = RequestInitChain{}
	mi := &file_tendermint_abci_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestInitChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestInitChain) ProtoMessage() {}

func (x *RequestInitChain) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestInitChain.ProtoReflect.Descriptor instead.
func (*RequestInitChain) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{5}
}

func (x *RequestInitChain) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RequestInitChain) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *RequestInitChain) GetConsensusParams() *ConsensusParams {
	if x != nil {
		return x.ConsensusParams
	}
	return nil
}

func (x *RequestInitChain) GetValidators() []*ValidatorUpdate {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *RequestInitChain) GetAppStateBytes() []byte {
	if x != nil {
		return x.AppStateBytes
	}
	return nil
}

func (x *RequestInitChain) GetInitialHeight() int64 {
	if x != nil {
		return x.InitialHeight
	}
	return 0
}

type RequestQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Height        int64                  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Prove         bool                   `protobuf:"varint,4,opt,name=prove,proto3" json:"prove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestQuery) Reset() {
	*x = RequestQuery{}
	mi := &file_tendermint_abci_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQuery) ProtoMessage() {}

func (x *RequestQuery) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQuery.ProtoReflect.Descriptor instead.
func (*RequestQuery) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{6}
}

func (x *RequestQuery) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RequestQuery) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RequestQuery) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RequestQuery) GetProve() bool {
	if x != nil {
		return x.Prove
	}
	return false
}

type RequestCheckTx struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            []byte                 `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Type          CheckTxType            `protobuf:"varint,2,opt,name=type,proto3,enum=tendermint.abci.CheckTxType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestCheckTx) Reset() {
	*x = RequestCheckTx{}
	mi := &file_tendermint_abci_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestCheckTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCheckTx) ProtoMessage() {}

func (x *RequestCheckTx) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCheckTx.ProtoReflect.Descriptor instead.
func (*RequestCheckTx) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{7}
}

func (x *RequestCheckTx) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *RequestCheckTx) GetType() CheckTxType {
	if x != nil {
		return x.Type
	}
	return CheckTxType_NEW
}

// lists available snapshots
type RequestListSnapshots struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestListSnapshots) Reset() {
	*x = RequestListSnapshots{}
	mi := &file_tendermint_abci_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestListSnapshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestListSnapshots) ProtoMessage() {}

func (x *RequestListSnapshots) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestListSnapshots.ProtoReflect.Descriptor instead.
func (*RequestListSnapshots) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{8}
}

// offers a snapshot to the application
type RequestOfferSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Snapshot      *Snapshot              `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`              // snapshot offered by peers
	AppHash       []byte                 `protobuf:"bytes,2,opt,name=app_hash,json=appHash,proto3" json:"app_hash,omitempty"` // light client-verified app hash for snapshot height
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestOfferSnapshot) Reset() {
	*x = RequestOfferSnapshot{}
	mi := &file_tendermint_abci_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestOfferSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestOfferSnapshot) ProtoMessage() {}

func (x *RequestOfferSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestOfferSnapshot.ProtoReflect.Descriptor instead.
func (*RequestOfferSnapshot) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{9}
}

func (x *RequestOfferSnapshot) GetSnapshot() *Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *RequestOfferSnapshot) GetAppHash() []byte {
	if x != nil {
		return x.AppHash
	}
	return nil
}

// loads a snapshot chunk
type RequestLoadSnapshotChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        uint64                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Format        uint32                 `protobuf:"varint,2,opt,name=format,proto3" json:"format,omitempty"`
	Chunk         uint32                 `protobuf:"varint,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestLoadSnapshotChunk) Reset() {
	*x = RequestLoadSnapshotChunk{}
	mi := &file_tendermint_abci_types_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestLoadSnapshotChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestLoadSnapshotChunk) ProtoMessage() {}

func (x *RequestLoadSnapshotChunk) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestLoadSnapshotChunk.ProtoReflect.Descriptor instead.
func (*RequestLoadSnapshotChunk) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{10}
}

func (x *RequestLoadSnapshotChunk) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RequestLoadSnapshotChunk) GetFormat() uint32 {
	if x != nil {
		return x.Format
	}
	return 0
}

func (x *RequestLoadSnapshotChunk) GetChunk() uint32 {
	if x != nil {
		return x.Chunk
	}
	return 0
}

// Applies a snapshot chunk
type RequestApplySnapshotChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         uint32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Chunk         []byte                 `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Sender        string                 `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestApplySnapshotChunk) Reset() {
	*x = RequestApplySnapshotChunk{}
	mi := &file_tendermint_abci_types_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestApplySnapshotChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestApplySnapshotChunk) ProtoMessage() {}

func (x *RequestApplySnapshotChunk) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestApplySnapshotChunk.ProtoReflect.Descriptor instead.
func (*RequestApplySnapshotChunk) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{11}
}

func (x *RequestApplySnapshotChunk) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RequestApplySnapshotChunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *RequestApplySnapshotChunk) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

type Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Response_Exception
	//	*Response_Echo
	//	*Response_Flush
	//	*Response_Info
	//	*Response_SetOption
	//	*Response_InitChain
	//	*Response_Query
	//	*Response_CheckTx
	//	*Response_ListSnapshots
	//	*Response_OfferSnapshot
	//	*Response_LoadSnapshotChunk
	//	*Response_ApplySnapshotChunk
	Value         isResponse_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_tendermint_abci_types_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{12}
}

func (x *Response) GetValue() isResponse_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Response) GetException() *ResponseException {
	if x != nil {
		if x, ok := x.Value.(*Response_Exception); ok {
			return x.Exception
		}
	}
	return nil
}

func (x *Response) GetEcho() *ResponseEcho {
	if x != nil {
		if x, ok := x.Value.(*Response_Echo); ok {
			return x.Echo
		}
	}
	return nil
}

func (x *Response) GetFlush() *ResponseFlush {
	if x != nil {
		if x, ok := x.Value.(*Response_Flush); ok {
			return x.Flush
		}
	}
	return nil
}

func (x *Response) GetInfo() *ResponseInfo {
	if x != nil {
		if x, ok := x.Value.(*Response_Info); ok {
			return x.Info
		}
	}
	return nil
}

func (x *Response) GetSetOption() *ResponseSetOption {
	if x != nil {
		if x, ok := x.Value.(*Response_SetOption); ok {
			return x.SetOption
		}
	}
	return nil
}

func (x *Response) GetInitChain() *ResponseInitChain {
	if x != nil {
		if x, ok := x.Value.(*Response_InitChain); ok {
			return x.InitChain
		}
	}
	return nil
}

func (x *Response) GetQuery() *ResponseQuery {
	if x != nil {
		if x, ok := x.Value.(*Response_Query); ok {
			return x.Query
		}
	}
	return nil
}

func (x *Response) GetCheckTx() *ResponseCheckTx {
	if x != nil {
		if x, ok := x.Value.(*Response_CheckTx); ok {
			return x.CheckTx
		}
	}
	return nil
}

func (x *Response) GetListSnapshots() *ResponseListSnapshots {
	if x != nil {
		if x, ok := x.Value.(*Response_ListSnapshots); ok {
			return x.ListSnapshots
		}
	}
	return nil
}

func (x *Response) GetOfferSnapshot() *ResponseOfferSnapshot {
	if x != nil {
		if x, ok := x.Value.(*Response_OfferSnapshot); ok {
			return x.OfferSnapshot
		}
	}
	return nil
}

func (x *Response) GetLoadSnapshotChunk() *ResponseLoadSnapshotChunk {
	if x != nil {
		if x, ok := x.Value.(*Response_LoadSnapshotChunk); ok {
			return x.LoadSnapshotChunk
		}
	}
	return nil
}

func (x *Response) GetApplySnapshotChunk() *ResponseApplySnapshotChunk {
	if x != nil {
		if x, ok := x.Value.(*Response_ApplySnapshotChunk); ok {
			return x.ApplySnapshotChunk
		}
	}
	return nil
}

type isResponse_Value interface {
	isResponse_Value()
}

type Response_Exception struct {
	Exception *ResponseException `protobuf:"bytes,1,opt,name=exception,proto3,oneof"`
}

type Response_Echo struct {
	Echo *ResponseEcho `protobuf:"bytes,2,opt,name=echo,proto3,oneof"`
}

type Response_Flush struct {
	Flush *ResponseFlush `protobuf:"bytes,3,opt,name=flush,proto3,oneof"`
}

type Response_Info struct {
	Info *ResponseInfo `protobuf:"bytes,4,opt,name=info,proto3,oneof"`
}

type Response_SetOption struct {
	SetOption *ResponseSetOption `protobuf:"bytes,5,opt,name=set_option,json=setOption,proto3,oneof"`
}

type Response_InitChain struct {
	InitChain *ResponseInitChain `protobuf:"bytes,6,opt,name=init_chain,json=initChain,proto3,oneof"`
}

type Response_Query struct {
	Query *ResponseQuery `protobuf:"bytes,7,opt,name=query,proto3,oneof"`
}

type Response_CheckTx struct {
	CheckTx *ResponseCheckTx `protobuf:"bytes,9,opt,name=check_tx,json=checkTx,proto3,oneof"`
}

type Response_ListSnapshots struct {
	ListSnapshots *ResponseListSnapshots `protobuf:"bytes,13,opt,name=list_snapshots,json=listSnapshots,proto3,oneof"`
}

type Response_OfferSnapshot struct {
	OfferSnapshot *ResponseOfferSnapshot `protobuf:"bytes,14,opt,name=offer_snapshot,json=offerSnapshot,proto3,oneof"`
}

type Response_LoadSnapshotChunk struct {
	LoadSnapshotChunk *ResponseLoadSnapshotChunk `protobuf:"bytes,15,opt,name=load_snapshot_chunk,json=loadSnapshotChunk,proto3,oneof"`
}

type Response_ApplySnapshotChunk struct {
	ApplySnapshotChunk *ResponseApplySnapshotChunk `protobuf:"bytes,16,opt,name=apply_snapshot_chunk,json=applySnapshotChunk,proto3,oneof"`
}

func (*Response_Exception) isResponse_Value() {}

func (*Response_Echo) isResponse_Value() {}

func (*Response_Flush) isResponse_Value() {}

func (*Response_Info) isResponse_Value() {}

func (*Response_SetOption) isResponse_Value() {}

func (*Response_InitChain) isResponse_Value() {}

func (*Response_Query) isResponse_Value() {}

func (*Response_CheckTx) isResponse_Value() {}

func (*Response_ListSnapshots) isResponse_Value() {}

func (*Response_OfferSnapshot) isResponse_Value() {}

func (*Response_LoadSnapshotChunk) isResponse_Value() {}

func (*Response_ApplySnapshotChunk) isResponse_Value() {}

// nondeterministic
type ResponseException struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         string                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseException) Reset() {
	*x = ResponseException{}
	mi := &file_tendermint_abci_types_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseException) ProtoMessage() {}

func (x *ResponseException) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseException.ProtoReflect.Descriptor instead.
func (*ResponseException) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{13}
}

func (x *ResponseException) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ResponseEcho struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseEcho) Reset() {
	*x = ResponseEcho{}
	mi := &file_tendermint_abci_types_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseEcho) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseEcho) ProtoMessage() {}

func (x *ResponseEcho) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseEcho.ProtoReflect.Descriptor instead.
func (*ResponseEcho) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{14}
}

func (x *ResponseEcho) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ResponseFlush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseFlush) Reset() {
	*x = ResponseFlush{}
	mi := &file_tendermint_abci_types_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseFlush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFlush) ProtoMessage() {}

func (x *ResponseFlush) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFlush.ProtoReflect.Descriptor instead.
func (*ResponseFlush) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{15}
}

type ResponseInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Data             string                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Version          string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	AppVersion       uint64                 `protobuf:"varint,3,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	LastBlockHeight  int64                  `protobuf:"varint,4,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
	LastBlockAppHash []byte                 `protobuf:"bytes,5,opt,name=last_block_app_hash,json=lastBlockAppHash,proto3" json:"last_block_app_hash,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ResponseInfo) Reset() {
	*x = ResponseInfo{}
	mi := &file_tendermint_abci_types_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseInfo) ProtoMessage() {}

func (x *ResponseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseInfo.ProtoReflect.Descriptor instead.
func (*ResponseInfo) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{16}
}

func (x *ResponseInfo) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ResponseInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ResponseInfo) GetAppVersion() uint64 {
	if x != nil {
		return x.AppVersion
	}
	return 0
}

func (x *ResponseInfo) GetLastBlockHeight() int64 {
	if x != nil {
		return x.LastBlockHeight
	}
	return 0
}

func (x *ResponseInfo) GetLastBlockAppHash() []byte {
	if x != nil {
		return x.LastBlockAppHash
	}
	return nil
}

// nondeterministic
type ResponseSetOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Code  uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// bytes data = 2;
	Log           string `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	Info          string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseSetOption) Reset() {
	*x = ResponseSetOption{}
	mi := &file_tendermint_abci_types_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseSetOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSetOption) ProtoMessage() {}

func (x *ResponseSetOption) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSetOption.ProtoReflect.Descriptor instead.
func (*ResponseSetOption) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{17}
}

func (x *ResponseSetOption) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseSetOption) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *ResponseSetOption) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type ResponseQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Code  uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// bytes data = 2; // use "value" instead.
	Log           string           `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`   // nondeterministic
	Info          string           `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"` // nondeterministic
	Index         int64            `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	Key           []byte           `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte           `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	ProofOps      *crypto.ProofOps `protobuf:"bytes,8,opt,name=proof_ops,json=proofOps,proto3" json:"proof_ops,omitempty"`
	Height        int64            `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	Codespace     string           `protobuf:"bytes,10,opt,name=codespace,proto3" json:"codespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseQuery) Reset() {
	*x = ResponseQuery{}
	mi := &file_tendermint_abci_types_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseQuery) ProtoMessage() {}

func (x *ResponseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseQuery.ProtoReflect.Descriptor instead.
func (*ResponseQuery) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{18}
}

func (x *ResponseQuery) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseQuery) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *ResponseQuery) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *ResponseQuery) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ResponseQuery) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ResponseQuery) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ResponseQuery) GetProofOps() *crypto.ProofOps {
	if x != nil {
		return x.ProofOps
	}
	return nil
}

func (x *ResponseQuery) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ResponseQuery) GetCodespace() string {
	if x != nil {
		return x.Codespace
	}
	return ""
}

type ResponseCheckTx struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Code      uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data      []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Log       string                 `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`   // nondeterministic
	Info      string                 `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"` // nondeterministic
	GasWanted int64                  `protobuf:"varint,5,opt,name=gas_wanted,proto3" json:"gas_wanted,omitempty"`
	GasUsed   int64                  `protobuf:"varint,6,opt,name=gas_used,proto3" json:"gas_used,omitempty"`
	Events    []*Event               `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	Codespace string                 `protobuf:"bytes,8,opt,name=codespace,proto3" json:"codespace,omitempty"`
	Sender    string                 `protobuf:"bytes,9,opt,name=sender,proto3" json:"sender,omitempty"`
	Priority  int64                  `protobuf:"varint,10,opt,name=priority,proto3" json:"priority,omitempty"`
	// mempool_error is set by Tendermint.
	// ABCI applictions creating a ResponseCheckTX should not set mempool_error.
	MempoolError  string `protobuf:"bytes,11,opt,name=mempool_error,json=mempoolError,proto3" json:"mempool_error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseCheckTx) Reset() {
	*x = ResponseCheckTx{}
	mi := &file_tendermint_abci_types_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseCheckTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCheckTx) ProtoMessage() {}

func (x *ResponseCheckTx) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCheckTx.ProtoReflect.Descriptor instead.
func (*ResponseCheckTx) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{19}
}

func (x *ResponseCheckTx) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseCheckTx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseCheckTx) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *ResponseCheckTx) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *ResponseCheckTx) GetGasWanted() int64 {
	if x != nil {
		return x.GasWanted
	}
	return 0
}

func (x *ResponseCheckTx) GetGasUsed() int64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ResponseCheckTx) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ResponseCheckTx) GetCodespace() string {
	if x != nil {
		return x.Codespace
	}
	return ""
}

func (x *ResponseCheckTx) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *ResponseCheckTx) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ResponseCheckTx) GetMempoolError() string {
	if x != nil {
		return x.MempoolError
	}
	return ""
}

type ResponseListSnapshots struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Snapshots     []*Snapshot            `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseListSnapshots) Reset() {
	*x = ResponseListSnapshots{}
	mi := &file_tendermint_abci_types_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseListSnapshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseListSnapshots) ProtoMessage() {}

func (x *ResponseListSnapshots) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseListSnapshots.ProtoReflect.Descriptor instead.
func (*ResponseListSnapshots) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{20}
}

func (x *ResponseListSnapshots) GetSnapshots() []*Snapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type ResponseOfferSnapshot struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Result        ResponseOfferSnapshot_Result `protobuf:"varint,1,opt,name=result,proto3,enum=tendermint.abci.ResponseOfferSnapshot_Result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseOfferSnapshot) Reset() {
	*x = ResponseOfferSnapshot{}
	mi := &file_tendermint_abci_types_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseOfferSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseOfferSnapshot) ProtoMessage() {}

func (x *ResponseOfferSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseOfferSnapshot.ProtoReflect.Descriptor instead.
func (*ResponseOfferSnapshot) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{21}
}

func (x *ResponseOfferSnapshot) GetResult() ResponseOfferSnapshot_Result {
	if x != nil {
		return x.Result
	}
	return ResponseOfferSnapshot_UNKNOWN
}

type ResponseLoadSnapshotChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunk         []byte                 `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseLoadSnapshotChunk) Reset() {
	*x = ResponseLoadSnapshotChunk{}
	mi := &file_tendermint_abci_types_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseLoadSnapshotChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLoadSnapshotChunk) ProtoMessage() {}

func (x *ResponseLoadSnapshotChunk) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLoadSnapshotChunk.ProtoReflect.Descriptor instead.
func (*ResponseLoadSnapshotChunk) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{22}
}

func (x *ResponseLoadSnapshotChunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type ResponseApplySnapshotChunk struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Result        ResponseApplySnapshotChunk_Result `protobuf:"varint,1,opt,name=result,proto3,enum=tendermint.abci.ResponseApplySnapshotChunk_Result" json:"result,omitempty"`
	RefetchChunks []uint32                          `protobuf:"varint,2,rep,packed,name=refetch_chunks,json=refetchChunks,proto3" json:"refetch_chunks,omitempty"` // Chunks to refetch and reapply
	RejectSenders []string                          `protobuf:"bytes,3,rep,name=reject_senders,json=rejectSenders,proto3" json:"reject_senders,omitempty"`         // Chunk senders to reject and ban
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseApplySnapshotChunk) Reset() {
	*x = ResponseApplySnapshotChunk{}
	mi := &file_tendermint_abci_types_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseApplySnapshotChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseApplySnapshotChunk) ProtoMessage() {}

func (x *ResponseApplySnapshotChunk) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseApplySnapshotChunk.ProtoReflect.Descriptor instead.
func (*ResponseApplySnapshotChunk) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{23}
}

func (x *ResponseApplySnapshotChunk) GetResult() ResponseApplySnapshotChunk_Result {
	if x != nil {
		return x.Result
	}
	return ResponseApplySnapshotChunk_UNKNOWN
}

func (x *ResponseApplySnapshotChunk) GetRefetchChunks() []uint32 {
	if x != nil {
		return x.RefetchChunks
	}
	return nil
}

func (x *ResponseApplySnapshotChunk) GetRejectSenders() []string {
	if x != nil {
		return x.RejectSenders
	}
	return nil
}

// ConsensusParams contains all consensus-relevant parameters
// that can be adjusted by the abci app
type ConsensusParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Block         *BlockParams           `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Evidence      *types.EvidenceParams  `protobuf:"bytes,2,opt,name=evidence,proto3" json:"evidence,omitempty"`
	Validator     *types.ValidatorParams `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	Version       *types.VersionParams   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsensusParams) Reset() {
	*x = ConsensusParams{}
	mi := &file_tendermint_abci_types_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsensusParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusParams) ProtoMessage() {}

func (x *ConsensusParams) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusParams.ProtoReflect.Descriptor instead.
func (*ConsensusParams) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{24}
}

func (x *ConsensusParams) GetBlock() *BlockParams {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *ConsensusParams) GetEvidence() *types.EvidenceParams {
	if x != nil {
		return x.Evidence
	}
	return nil
}

func (x *ConsensusParams) GetValidator() *types.ValidatorParams {
	if x != nil {
		return x.Validator
	}
	return nil
}

func (x *ConsensusParams) GetVersion() *types.VersionParams {
	if x != nil {
		return x.Version
	}
	return nil
}

// BlockParams contains limits on the block size.
type BlockParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Note: must be greater than 0
	MaxBytes int64 `protobuf:"varint,1,opt,name=max_bytes,json=maxBytes,proto3" json:"max_bytes,omitempty"`
	// Note: must be greater or equal to -1
	MaxGas        int64 `protobuf:"varint,2,opt,name=max_gas,json=maxGas,proto3" json:"max_gas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockParams) Reset() {
	*x = BlockParams{}
	mi := &file_tendermint_abci_types_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockParams) ProtoMessage() {}

func (x *BlockParams) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockParams.ProtoReflect.Descriptor instead.
func (*BlockParams) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{25}
}

func (x *BlockParams) GetMaxBytes() int64 {
	if x != nil {
		return x.MaxBytes
	}
	return 0
}

func (x *BlockParams) GetMaxGas() int64 {
	if x != nil {
		return x.MaxGas
	}
	return 0
}

type LastCommitInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Round         int32                  `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Votes         []*VoteInfo            `protobuf:"bytes,2,rep,name=votes,proto3" json:"votes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastCommitInfo) Reset() {
	*x = LastCommitInfo{}
	mi := &file_tendermint_abci_types_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastCommitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastCommitInfo) ProtoMessage() {}

func (x *LastCommitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastCommitInfo.ProtoReflect.Descriptor instead.
func (*LastCommitInfo) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{26}
}

func (x *LastCommitInfo) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *LastCommitInfo) GetVotes() []*VoteInfo {
	if x != nil {
		return x.Votes
	}
	return nil
}

// Event allows application developers to attach additional information to
// ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
// Later, transactions may be queried using these events.
type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes    []*EventAttribute      `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_tendermint_abci_types_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{27}
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetAttributes() []*EventAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// EventAttribute is a single key-value pair, associated with an event.
type EventAttribute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Index         bool                   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"` // nondeterministic
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventAttribute) Reset() {
	*x = EventAttribute{}
	mi := &file_tendermint_abci_types_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAttribute) ProtoMessage() {}

func (x *EventAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAttribute.ProtoReflect.Descriptor instead.
func (*EventAttribute) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{28}
}

func (x *EventAttribute) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EventAttribute) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EventAttribute) GetIndex() bool {
	if x != nil {
		return x.Index
	}
	return false
}

// TxResult contains results of executing the transaction.
//
// One usage is indexing transaction results.
type TxResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        int64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Index         uint32                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Tx            []byte                 `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
	Result        *ResponseDeliverTx     `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxResult) Reset() {
	*x = TxResult{}
	mi := &file_tendermint_abci_types_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxResult) ProtoMessage() {}

func (x *TxResult) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxResult.ProtoReflect.Descriptor instead.
func (*TxResult) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{29}
}

func (x *TxResult) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TxResult) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TxResult) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *TxResult) GetResult() *ResponseDeliverTx {
	if x != nil {
		return x.Result
	}
	return nil
}

// Validator
type Validator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // The first 20 bytes of SHA256(public key)
	PubKey        *crypto.PublicKey      `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Power         int64                  `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"` // The voting power
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Validator) Reset() {
	*x = Validator{}
	mi := &file_tendermint_abci_types_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{30}
}

func (x *Validator) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Validator) GetPubKey() *crypto.PublicKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Validator) GetPower() int64 {
	if x != nil {
		return x.Power
	}
	return 0
}

// ValidatorUpdate
type ValidatorUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PubKey        *crypto.PublicKey      `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Power         int64                  `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidatorUpdate) Reset() {
	*x = ValidatorUpdate{}
	mi := &file_tendermint_abci_types_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatorUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorUpdate) ProtoMessage() {}

func (x *ValidatorUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorUpdate.ProtoReflect.Descriptor instead.
func (*ValidatorUpdate) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{31}
}

func (x *ValidatorUpdate) GetPubKey() *crypto.PublicKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ValidatorUpdate) GetPower() int64 {
	if x != nil {
		return x.Power
	}
	return 0
}

// VoteInfo
type VoteInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Validator       *Validator             `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	SignedLastBlock bool                   `protobuf:"varint,2,opt,name=signed_last_block,json=signedLastBlock,proto3" json:"signed_last_block,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VoteInfo) Reset() {
	*x = VoteInfo{}
	mi := &file_tendermint_abci_types_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteInfo) ProtoMessage() {}

func (x *VoteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteInfo.ProtoReflect.Descriptor instead.
func (*VoteInfo) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{32}
}

func (x *VoteInfo) GetValidator() *Validator {
	if x != nil {
		return x.Validator
	}
	return nil
}

func (x *VoteInfo) GetSignedLastBlock() bool {
	if x != nil {
		return x.SignedLastBlock
	}
	return false
}

type Evidence struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  EvidenceType           `protobuf:"varint,1,opt,name=type,proto3,enum=tendermint.abci.EvidenceType" json:"type,omitempty"`
	// The offending validator
	Validator *Validator `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	// The height when the offense occurred
	Height int64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// The corresponding time where the offense occurred
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// Total voting power of the validator set in case the ABCI application does
	// not store historical validators.
	// https://github.com/cometbft/cometbft/issues/4581
	TotalVotingPower int64 `protobuf:"varint,5,opt,name=total_voting_power,json=totalVotingPower,proto3" json:"total_voting_power,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Evidence) Reset() {
	*x = Evidence{}
	mi := &file_tendermint_abci_types_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evidence) ProtoMessage() {}

func (x *Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evidence.ProtoReflect.Descriptor instead.
func (*Evidence) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{33}
}

func (x *Evidence) GetType() EvidenceType {
	if x != nil {
		return x.Type
	}
	return EvidenceType_UNKNOWN
}

func (x *Evidence) GetValidator() *Validator {
	if x != nil {
		return x.Validator
	}
	return nil
}

func (x *Evidence) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Evidence) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Evidence) GetTotalVotingPower() int64 {
	if x != nil {
		return x.TotalVotingPower
	}
	return 0
}

type Snapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        uint64                 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`    // The height at which the snapshot was taken
	Format        uint32                 `protobuf:"varint,2,opt,name=format,proto3" json:"format,omitempty"`    // The application-specific snapshot format
	Chunks        uint32                 `protobuf:"varint,3,opt,name=chunks,proto3" json:"chunks,omitempty"`    // Number of chunks in the snapshot
	Hash          []byte                 `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`         // Arbitrary snapshot hash, equal only if identical
	Metadata      []byte                 `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"` // Arbitrary application metadata
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	mi := &file_tendermint_abci_types_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{34}
}

func (x *Snapshot) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Snapshot) GetFormat() uint32 {
	if x != nil {
		return x.Format
	}
	return 0
}

func (x *Snapshot) GetChunks() uint32 {
	if x != nil {
		return x.Chunks
	}
	return 0
}

func (x *Snapshot) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Snapshot) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// RequestCommit requests the application to commit to the current state and return the Merkle root hash.
type RequestCommit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestCommit) Reset() {
	*x = RequestCommit{}
	mi := &file_tendermint_abci_types_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCommit) ProtoMessage() {}

func (x *RequestCommit) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCommit.ProtoReflect.Descriptor instead.
func (*RequestCommit) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{35}
}

// ResponseCommit contains the result of committing the application state.
type ResponseCommit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	RetainHeight  int64                  `protobuf:"varint,3,opt,name=retain_height,json=retainHeight,proto3" json:"retain_height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseCommit) Reset() {
	*x = ResponseCommit{}
	mi := &file_tendermint_abci_types_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCommit) ProtoMessage() {}

func (x *ResponseCommit) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCommit.ProtoReflect.Descriptor instead.
func (*ResponseCommit) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{36}
}

func (x *ResponseCommit) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseCommit) GetRetainHeight() int64 {
	if x != nil {
		return x.RetainHeight
	}
	return 0
}

// ResponseInitChain contains the result of initializing the chain.
type ResponseInitChain struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Validators      []*ValidatorUpdate     `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
	ConsensusParams *ConsensusParams       `protobuf:"bytes,2,opt,name=consensus_params,json=consensusParams,proto3" json:"consensus_params,omitempty"`
	AppHash         []byte                 `protobuf:"bytes,3,opt,name=app_hash,json=appHash,proto3" json:"app_hash,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ResponseInitChain) Reset() {
	*x = ResponseInitChain{}
	mi := &file_tendermint_abci_types_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseInitChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseInitChain) ProtoMessage() {}

func (x *ResponseInitChain) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseInitChain.ProtoReflect.Descriptor instead.
func (*ResponseInitChain) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{37}
}

func (x *ResponseInitChain) GetValidators() []*ValidatorUpdate {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *ResponseInitChain) GetConsensusParams() *ConsensusParams {
	if x != nil {
		return x.ConsensusParams
	}
	return nil
}

func (x *ResponseInitChain) GetAppHash() []byte {
	if x != nil {
		return x.AppHash
	}
	return nil
}

// ResponseDeliverTx contains the result of delivering a transaction.
type ResponseDeliverTx struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Log           string                 `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	Info          string                 `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	GasWanted     int64                  `protobuf:"varint,5,opt,name=gas_wanted,proto3" json:"gas_wanted,omitempty"`
	GasUsed       int64                  `protobuf:"varint,6,opt,name=gas_used,proto3" json:"gas_used,omitempty"`
	Events        []*Event               `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	Codespace     string                 `protobuf:"bytes,8,opt,name=codespace,proto3" json:"codespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseDeliverTx) Reset() {
	*x = ResponseDeliverTx{}
	mi := &file_tendermint_abci_types_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseDeliverTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDeliverTx) ProtoMessage() {}

func (x *ResponseDeliverTx) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_abci_types_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDeliverTx.ProtoReflect.Descriptor instead.
func (*ResponseDeliverTx) Descriptor() ([]byte, []int) {
	return file_tendermint_abci_types_proto_rawDescGZIP(), []int{38}
}

func (x *ResponseDeliverTx) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseDeliverTx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseDeliverTx) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *ResponseDeliverTx) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *ResponseDeliverTx) GetGasWanted() int64 {
	if x != nil {
		return x.GasWanted
	}
	return 0
}

func (x *ResponseDeliverTx) GetGasUsed() int64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ResponseDeliverTx) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ResponseDeliverTx) GetCodespace() string {
	if x != nil {
		return x.Codespace
	}
	return ""
}

var File_tendermint_abci_types_proto protoreflect.FileDescriptor

const file_tendermint_abci_types_proto_rawDesc = "" +
	"\n" +
	"\x1btendermint/abci/types.proto\x12\x0ftendermint.abci\x1a\x1dtendermint/crypto/proof.proto\x1a\x1ctendermint/types/types.proto\x1a\x1ctendermint/crypto/keys.proto\x1a\x1dtendermint/types/params.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x14gogoproto/gogo.proto\"\x8b\x06\n" +
	"\aRequest\x122\n" +
	"\x04echo\x18\x01 \x01(\v2\x1c.tendermint.abci.RequestEchoH\x00R\x04echo\x125\n" +
	"\x05flush\x18\x02 \x01(\v2\x1d.tendermint.abci.RequestFlushH\x00R\x05flush\x122\n" +
	"\x04info\x18\x03 \x01(\v2\x1c.tendermint.abci.RequestInfoH\x00R\x04info\x12B\n" +
	"\n" +
	"set_option\x18\x04 \x01(\v2!.tendermint.abci.RequestSetOptionH\x00R\tsetOption\x12B\n" +
	"\n" +
	"init_chain\x18\x05 \x01(\v2!.tendermint.abci.RequestInitChainH\x00R\tinitChain\x125\n" +
	"\x05query\x18\x06 \x01(\v2\x1d.tendermint.abci.RequestQueryH\x00R\x05query\x12<\n" +
	"\bcheck_tx\x18\b \x01(\v2\x1f.tendermint.abci.RequestCheckTxH\x00R\acheckTx\x12N\n" +
	"\x0elist_snapshots\x18\f \x01(\v2%.tendermint.abci.RequestListSnapshotsH\x00R\rlistSnapshots\x12N\n" +
	"\x0eoffer_snapshot\x18\r \x01(\v2%.tendermint.abci.RequestOfferSnapshotH\x00R\rofferSnapshot\x12[\n" +
	"\x13load_snapshot_chunk\x18\x0e \x01(\v2).tendermint.abci.RequestLoadSnapshotChunkH\x00R\x11loadSnapshotChunk\x12^\n" +
	"\x14apply_snapshot_chunk\x18\x0f \x01(\v2*.tendermint.abci.RequestApplySnapshotChunkH\x00R\x12applySnapshotChunkB\a\n" +
	"\x05value\"'\n" +
	"\vRequestEcho\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"\x0e\n" +
	"\fRequestFlush\"m\n" +
	"\vRequestInfo\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12#\n" +
	"\rblock_version\x18\x02 \x01(\x04R\fblockVersion\x12\x1f\n" +
	"\vp2p_version\x18\x03 \x01(\x04R\n" +
	"p2pVersion\":\n" +
	"\x10RequestSetOption\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\xcb\x02\n" +
	"\x10RequestInitChain\x128\n" +
	"\x04time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampB\b\xc8\xde\x1f\x00\x90\xdf\x1f\x01R\x04time\x12\x19\n" +
	"\bchain_id\x18\x02 \x01(\tR\achainId\x12K\n" +
	"\x10consensus_params\x18\x03 \x01(\v2 .tendermint.abci.ConsensusParamsR\x0fconsensusParams\x12F\n" +
	"\n" +
	"validators\x18\x04 \x03(\v2 .tendermint.abci.ValidatorUpdateB\x04\xc8\xde\x1f\x00R\n" +
	"validators\x12&\n" +
	"\x0fapp_state_bytes\x18\x05 \x01(\fR\rappStateBytes\x12%\n" +
	"\x0einitial_height\x18\x06 \x01(\x03R\rinitialHeight\"d\n" +
	"\fRequestQuery\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x16\n" +
	"\x06height\x18\x03 \x01(\x03R\x06height\x12\x14\n" +
	"\x05prove\x18\x04 \x01(\bR\x05prove\"R\n" +
	"\x0eRequestCheckTx\x12\x0e\n" +
	"\x02tx\x18\x01 \x01(\fR\x02tx\x120\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1c.tendermint.abci.CheckTxTypeR\x04type\"\x16\n" +
	"\x14RequestListSnapshots\"h\n" +
	"\x14RequestOfferSnapshot\x125\n" +
	"\bsnapshot\x18\x01 \x01(\v2\x19.tendermint.abci.SnapshotR\bsnapshot\x12\x19\n" +
	"\bapp_hash\x18\x02 \x01(\fR\aappHash\"`\n" +
	"\x18RequestLoadSnapshotChunk\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x04R\x06height\x12\x16\n" +
	"\x06format\x18\x02 \x01(\rR\x06format\x12\x14\n" +
	"\x05chunk\x18\x03 \x01(\rR\x05chunk\"_\n" +
	"\x19RequestApplySnapshotChunk\x12\x14\n" +
	"\x05index\x18\x01 \x01(\rR\x05index\x12\x14\n" +
	"\x05chunk\x18\x02 \x01(\fR\x05chunk\x12\x16\n" +
	"\x06sender\x18\x03 \x01(\tR\x06sender\"\xdb\x06\n" +
	"\bResponse\x12B\n" +
	"\texception\x18\x01 \x01(\v2\".tendermint.abci.ResponseExceptionH\x00R\texception\x123\n" +
	"\x04echo\x18\x02 \x01(\v2\x1d.tendermint.abci.ResponseEchoH\x00R\x04echo\x126\n" +
	"\x05flush\x18\x03 \x01(\v2\x1e.tendermint.abci.ResponseFlushH\x00R\x05flush\x123\n" +
	"\x04info\x18\x04 \x01(\v2\x1d.tendermint.abci.ResponseInfoH\x00R\x04info\x12C\n" +
	"\n" +
	"set_option\x18\x05 \x01(\v2\".tendermint.abci.ResponseSetOptionH\x00R\tsetOption\x12C\n" +
	"\n" +
	"init_chain\x18\x06 \x01(\v2\".tendermint.abci.ResponseInitChainH\x00R\tinitChain\x126\n" +
	"\x05query\x18\a \x01(\v2\x1e.tendermint.abci.ResponseQueryH\x00R\x05query\x12=\n" +
	"\bcheck_tx\x18\t \x01(\v2 .tendermint.abci.ResponseCheckTxH\x00R\acheckTx\x12O\n" +
	"\x0elist_snapshots\x18\r \x01(\v2&.tendermint.abci.ResponseListSnapshotsH\x00R\rlistSnapshots\x12O\n" +
	"\x0eoffer_snapshot\x18\x0e \x01(\v2&.tendermint.abci.ResponseOfferSnapshotH\x00R\rofferSnapshot\x12\\\n" +
	"\x13load_snapshot_chunk\x18\x0f \x01(\v2*.tendermint.abci.ResponseLoadSnapshotChunkH\x00R\x11loadSnapshotChunk\x12_\n" +
	"\x14apply_snapshot_chunk\x18\x10 \x01(\v2+.tendermint.abci.ResponseApplySnapshotChunkH\x00R\x12applySnapshotChunkB\a\n" +
	"\x05value\")\n" +
	"\x11ResponseException\x12\x14\n" +
	"\x05error\x18\x01 \x01(\tR\x05error\"(\n" +
	"\fResponseEcho\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"\x0f\n" +
	"\rResponseFlush\"\xb8\x01\n" +
	"\fResponseInfo\x12\x12\n" +
	"\x04data\x18\x01 \x01(\tR\x04data\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x1f\n" +
	"\vapp_version\x18\x03 \x01(\x04R\n" +
	"appVersion\x12*\n" +
	"\x11last_block_height\x18\x04 \x01(\x03R\x0flastBlockHeight\x12-\n" +
	"\x13last_block_app_hash\x18\x05 \x01(\fR\x10lastBlockAppHash\"M\n" +
	"\x11ResponseSetOption\x12\x12\n" +
	"\x04code\x18\x01 \x01(\rR\x04code\x12\x10\n" +
	"\x03log\x18\x03 \x01(\tR\x03log\x12\x12\n" +
	"\x04info\x18\x04 \x01(\tR\x04info\"\xf7\x01\n" +
	"\rResponseQuery\x12\x12\n" +
	"\x04code\x18\x01 \x01(\rR\x04code\x12\x10\n" +
	"\x03log\x18\x03 \x01(\tR\x03log\x12\x12\n" +
	"\x04info\x18\x04 \x01(\tR\x04info\x12\x14\n" +
	"\x05index\x18\x05 \x01(\x03R\x05index\x12\x10\n" +
	"\x03key\x18\x06 \x01(\fR\x03key\x12\x14\n" +
	"\x05value\x18\a \x01(\fR\x05value\x128\n" +
	"\tproof_ops\x18\b \x01(\v2\x1b.tendermint.crypto.ProofOpsR\bproofOps\x12\x16\n" +
	"\x06height\x18\t \x01(\x03R\x06height\x12\x1c\n" +
	"\tcodespace\x18\n" +
	" \x01(\tR\tcodespace\"\xdc\x02\n" +
	"\x0fResponseCheckTx\x12\x12\n" +
	"\x04code\x18\x01 \x01(\rR\x04code\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x10\n" +
	"\x03log\x18\x03 \x01(\tR\x03log\x12\x12\n" +
	"\x04info\x18\x04 \x01(\tR\x04info\x12\x1e\n" +
	"\n" +
	"gas_wanted\x18\x05 \x01(\x03R\n" +
	"gas_wanted\x12\x1a\n" +
	"\bgas_used\x18\x06 \x01(\x03R\bgas_used\x12H\n" +
	"\x06events\x18\a \x03(\v2\x16.tendermint.abci.EventB\x18\xc8\xde\x1f\x00\xea\xde\x1f\x10events,omitemptyR\x06events\x12\x1c\n" +
	"\tcodespace\x18\b \x01(\tR\tcodespace\x12\x16\n" +
	"\x06sender\x18\t \x01(\tR\x06sender\x12\x1a\n" +
	"\bpriority\x18\n" +
	" \x01(\x03R\bpriority\x12#\n" +
	"\rmempool_error\x18\v \x01(\tR\fmempoolError\"P\n" +
	"\x15ResponseListSnapshots\x127\n" +
	"\tsnapshots\x18\x01 \x03(\v2\x19.tendermint.abci.SnapshotR\tsnapshots\"\xbe\x01\n" +
	"\x15ResponseOfferSnapshot\x12E\n" +
	"\x06result\x18\x01 \x01(\x0e2-.tendermint.abci.ResponseOfferSnapshot.ResultR\x06result\"^\n" +
	"\x06Result\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\n" +
	"\n" +
	"\x06ACCEPT\x10\x01\x12\t\n" +
	"\x05ABORT\x10\x02\x12\n" +
	"\n" +
	"\x06REJECT\x10\x03\x12\x11\n" +
	"\rREJECT_FORMAT\x10\x04\x12\x11\n" +
	"\rREJECT_SENDER\x10\x05\"1\n" +
	"\x19ResponseLoadSnapshotChunk\x12\x14\n" +
	"\x05chunk\x18\x01 \x01(\fR\x05chunk\"\x98\x02\n" +
	"\x1aResponseApplySnapshotChunk\x12J\n" +
	"\x06result\x18\x01 \x01(\x0e22.tendermint.abci.ResponseApplySnapshotChunk.ResultR\x06result\x12%\n" +
	"\x0erefetch_chunks\x18\x02 \x03(\rR\rrefetchChunks\x12%\n" +
	"\x0ereject_senders\x18\x03 \x03(\tR\rrejectSenders\"`\n" +
	"\x06Result\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\n" +
	"\n" +
	"\x06ACCEPT\x10\x01\x12\t\n" +
	"\x05ABORT\x10\x02\x12\t\n" +
	"\x05RETRY\x10\x03\x12\x12\n" +
	"\x0eRETRY_SNAPSHOT\x10\x04\x12\x13\n" +
	"\x0fREJECT_SNAPSHOT\x10\x05\"\xff\x01\n" +
	"\x0fConsensusParams\x122\n" +
	"\x05block\x18\x01 \x01(\v2\x1c.tendermint.abci.BlockParamsR\x05block\x12<\n" +
	"\bevidence\x18\x02 \x01(\v2 .tendermint.types.EvidenceParamsR\bevidence\x12?\n" +
	"\tvalidator\x18\x03 \x01(\v2!.tendermint.types.ValidatorParamsR\tvalidator\x129\n" +
	"\aversion\x18\x04 \x01(\v2\x1f.tendermint.types.VersionParamsR\aversion\"C\n" +
	"\vBlockParams\x12\x1b\n" +
	"\tmax_bytes\x18\x01 \x01(\x03R\bmaxBytes\x12\x17\n" +
	"\amax_gas\x18\x02 \x01(\x03R\x06maxGas\"]\n" +
	"\x0eLastCommitInfo\x12\x14\n" +
	"\x05round\x18\x01 \x01(\x05R\x05round\x125\n" +
	"\x05votes\x18\x02 \x03(\v2\x19.tendermint.abci.VoteInfoB\x04\xc8\xde\x1f\x00R\x05votes\"z\n" +
	"\x05Event\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12]\n" +
	"\n" +
	"attributes\x18\x02 \x03(\v2\x1f.tendermint.abci.EventAttributeB\x1c\xc8\xde\x1f\x00\xea\xde\x1f\x14attributes,omitemptyR\n" +
	"attributes\"N\n" +
	"\x0eEventAttribute\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\x12\x14\n" +
	"\x05index\x18\x03 \x01(\bR\x05index\"\x8a\x01\n" +
	"\bTxResult\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x03R\x06height\x12\x14\n" +
	"\x05index\x18\x02 \x01(\rR\x05index\x12\x0e\n" +
	"\x02tx\x18\x03 \x01(\fR\x02tx\x12@\n" +
	"\x06result\x18\x04 \x01(\v2\".tendermint.abci.ResponseDeliverTxB\x04\xc8\xde\x1f\x00R\x06result\"x\n" +
	"\tValidator\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\fR\aaddress\x12;\n" +
	"\apub_key\x18\x02 \x01(\v2\x1c.tendermint.crypto.PublicKeyB\x04\xc8\xde\x1f\x00R\x06pubKey\x12\x14\n" +
	"\x05power\x18\x03 \x01(\x03R\x05power\"d\n" +
	"\x0fValidatorUpdate\x12;\n" +
	"\apub_key\x18\x01 \x01(\v2\x1c.tendermint.crypto.PublicKeyB\x04\xc8\xde\x1f\x00R\x06pubKey\x12\x14\n" +
	"\x05power\x18\x02 \x01(\x03R\x05power\"v\n" +
	"\bVoteInfo\x12>\n" +
	"\tvalidator\x18\x01 \x01(\v2\x1a.tendermint.abci.ValidatorB\x04\xc8\xde\x1f\x00R\tvalidator\x12*\n" +
	"\x11signed_last_block\x18\x02 \x01(\bR\x0fsignedLastBlock\"\xfd\x01\n" +
	"\bEvidence\x121\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1d.tendermint.abci.EvidenceTypeR\x04type\x12>\n" +
	"\tvalidator\x18\x02 \x01(\v2\x1a.tendermint.abci.ValidatorB\x04\xc8\xde\x1f\x00R\tvalidator\x12\x16\n" +
	"\x06height\x18\x03 \x01(\x03R\x06height\x128\n" +
	"\x04time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\b\xc8\xde\x1f\x00\x90\xdf\x1f\x01R\x04time\x12,\n" +
	"\x12total_voting_power\x18\x05 \x01(\x03R\x10totalVotingPower\"\x82\x01\n" +
	"\bSnapshot\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x04R\x06height\x12\x16\n" +
	"\x06format\x18\x02 \x01(\rR\x06format\x12\x16\n" +
	"\x06chunks\x18\x03 \x01(\rR\x06chunks\x12\x12\n" +
	"\x04hash\x18\x04 \x01(\fR\x04hash\x12\x1a\n" +
	"\bmetadata\x18\x05 \x01(\fR\bmetadata\"\x0f\n" +
	"\rRequestCommit\"I\n" +
	"\x0eResponseCommit\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12#\n" +
	"\rretain_height\x18\x03 \x01(\x03R\fretainHeight\"\xbd\x01\n" +
	"\x11ResponseInitChain\x12@\n" +
	"\n" +
	"validators\x18\x01 \x03(\v2 .tendermint.abci.ValidatorUpdateR\n" +
	"validators\x12K\n" +
	"\x10consensus_params\x18\x02 \x01(\v2 .tendermint.abci.ConsensusParamsR\x0fconsensusParams\x12\x19\n" +
	"\bapp_hash\x18\x03 \x01(\fR\aappHash\"\x85\x02\n" +
	"\x11ResponseDeliverTx\x12\x12\n" +
	"\x04code\x18\x01 \x01(\rR\x04code\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x10\n" +
	"\x03log\x18\x03 \x01(\tR\x03log\x12\x12\n" +
	"\x04info\x18\x04 \x01(\tR\x04info\x12\x1e\n" +
	"\n" +
	"gas_wanted\x18\x05 \x01(\x03R\n" +
	"gas_wanted\x12\x1a\n" +
	"\bgas_used\x18\x06 \x01(\x03R\bgas_used\x12H\n" +
	"\x06events\x18\a \x03(\v2\x16.tendermint.abci.EventB\x18\xc8\xde\x1f\x00\xea\xde\x1f\x10events,omitemptyR\x06events\x12\x1c\n" +
	"\tcodespace\x18\b \x01(\tR\tcodespace*9\n" +
	"\vCheckTxType\x12\x10\n" +
	"\x03NEW\x10\x00\x1a\a\x8a\x9d \x03New\x12\x18\n" +
	"\aRECHECK\x10\x01\x1a\v\x8a\x9d \aRecheck*H\n" +
	"\fEvidenceType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x12\n" +
	"\x0eDUPLICATE_VOTE\x10\x01\x12\x17\n" +
	"\x13LIGHT_CLIENT_ATTACK\x10\x022\x87\b\n" +
	"\x0fABCIApplication\x12C\n" +
	"\x04Echo\x12\x1c.tendermint.abci.RequestEcho\x1a\x1d.tendermint.abci.ResponseEcho\x12F\n" +
	"\x05Flush\x12\x1d.tendermint.abci.RequestFlush\x1a\x1e.tendermint.abci.ResponseFlush\x12C\n" +
	"\x04Info\x12\x1c.tendermint.abci.RequestInfo\x1a\x1d.tendermint.abci.ResponseInfo\x12R\n" +
	"\tSetOption\x12!.tendermint.abci.RequestSetOption\x1a\".tendermint.abci.ResponseSetOption\x12L\n" +
	"\aCheckTx\x12\x1f.tendermint.abci.RequestCheckTx\x1a .tendermint.abci.ResponseCheckTx\x12F\n" +
	"\x05Query\x12\x1d.tendermint.abci.RequestQuery\x1a\x1e.tendermint.abci.ResponseQuery\x12I\n" +
	"\x06Commit\x12\x1e.tendermint.abci.RequestCommit\x1a\x1f.tendermint.abci.ResponseCommit\x12R\n" +
	"\tInitChain\x12!.tendermint.abci.RequestInitChain\x1a\".tendermint.abci.ResponseInitChain\x12^\n" +
	"\rListSnapshots\x12%.tendermint.abci.RequestListSnapshots\x1a&.tendermint.abci.ResponseListSnapshots\x12^\n" +
	"\rOfferSnapshot\x12%.tendermint.abci.RequestOfferSnapshot\x1a&.tendermint.abci.ResponseOfferSnapshot\x12j\n" +
	"\x11LoadSnapshotChunk\x12).tendermint.abci.RequestLoadSnapshotChunk\x1a*.tendermint.abci.ResponseLoadSnapshotChunk\x12m\n" +
	"\x12ApplySnapshotChunk\x12*.tendermint.abci.RequestApplySnapshotChunk\x1a+.tendermint.abci.ResponseApplySnapshotChunkB\xb8\x01\n" +
	"\x13com.tendermint.abciB\n" +
	"TypesProtoP\x01Z8github.com/fluentum-chain/fluentum/proto/tendermint/abci\xa2\x02\x03TAX\xaa\x02\x0fTendermint.Abci\xca\x02\x0fTendermint\\Abci\xe2\x02\x1bTendermint\\Abci\\GPBMetadata\xea\x02\x10Tendermint::Abcib\x06proto3"

var (
	file_tendermint_abci_types_proto_rawDescOnce sync.Once
	file_tendermint_abci_types_proto_rawDescData []byte
)

func file_tendermint_abci_types_proto_rawDescGZIP() []byte {
	file_tendermint_abci_types_proto_rawDescOnce.Do(func() {
		file_tendermint_abci_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tendermint_abci_types_proto_rawDesc), len(file_tendermint_abci_types_proto_rawDesc)))
	})
	return file_tendermint_abci_types_proto_rawDescData
}

var file_tendermint_abci_types_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_tendermint_abci_types_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_tendermint_abci_types_proto_goTypes = []any{
	(CheckTxType)(0),                       // 0: tendermint.abci.CheckTxType
	(EvidenceType)(0),                      // 1: tendermint.abci.EvidenceType
	(ResponseOfferSnapshot_Result)(0),      // 2: tendermint.abci.ResponseOfferSnapshot.Result
	(ResponseApplySnapshotChunk_Result)(0), // 3: tendermint.abci.ResponseApplySnapshotChunk.Result
	(*Request)(nil),                        // 4: tendermint.abci.Request
	(*RequestEcho)(nil),                    // 5: tendermint.abci.RequestEcho
	(*RequestFlush)(nil),                   // 6: tendermint.abci.RequestFlush
	(*RequestInfo)(nil),                    // 7: tendermint.abci.RequestInfo
	(*RequestSetOption)(nil),               // 8: tendermint.abci.RequestSetOption
	(*RequestInitChain)(nil),               // 9: tendermint.abci.RequestInitChain
	(*RequestQuery)(nil),                   // 10: tendermint.abci.RequestQuery
	(*RequestCheckTx)(nil),                 // 11: tendermint.abci.RequestCheckTx
	(*RequestListSnapshots)(nil),           // 12: tendermint.abci.RequestListSnapshots
	(*RequestOfferSnapshot)(nil),           // 13: tendermint.abci.RequestOfferSnapshot
	(*RequestLoadSnapshotChunk)(nil),       // 14: tendermint.abci.RequestLoadSnapshotChunk
	(*RequestApplySnapshotChunk)(nil),      // 15: tendermint.abci.RequestApplySnapshotChunk
	(*Response)(nil),                       // 16: tendermint.abci.Response
	(*ResponseException)(nil),              // 17: tendermint.abci.ResponseException
	(*ResponseEcho)(nil),                   // 18: tendermint.abci.ResponseEcho
	(*ResponseFlush)(nil),                  // 19: tendermint.abci.ResponseFlush
	(*ResponseInfo)(nil),                   // 20: tendermint.abci.ResponseInfo
	(*ResponseSetOption)(nil),              // 21: tendermint.abci.ResponseSetOption
	(*ResponseQuery)(nil),                  // 22: tendermint.abci.ResponseQuery
	(*ResponseCheckTx)(nil),                // 23: tendermint.abci.ResponseCheckTx
	(*ResponseListSnapshots)(nil),          // 24: tendermint.abci.ResponseListSnapshots
	(*ResponseOfferSnapshot)(nil),          // 25: tendermint.abci.ResponseOfferSnapshot
	(*ResponseLoadSnapshotChunk)(nil),      // 26: tendermint.abci.ResponseLoadSnapshotChunk
	(*ResponseApplySnapshotChunk)(nil),     // 27: tendermint.abci.ResponseApplySnapshotChunk
	(*ConsensusParams)(nil),                // 28: tendermint.abci.ConsensusParams
	(*BlockParams)(nil),                    // 29: tendermint.abci.BlockParams
	(*LastCommitInfo)(nil),                 // 30: tendermint.abci.LastCommitInfo
	(*Event)(nil),                          // 31: tendermint.abci.Event
	(*EventAttribute)(nil),                 // 32: tendermint.abci.EventAttribute
	(*TxResult)(nil),                       // 33: tendermint.abci.TxResult
	(*Validator)(nil),                      // 34: tendermint.abci.Validator
	(*ValidatorUpdate)(nil),                // 35: tendermint.abci.ValidatorUpdate
	(*VoteInfo)(nil),                       // 36: tendermint.abci.VoteInfo
	(*Evidence)(nil),                       // 37: tendermint.abci.Evidence
	(*Snapshot)(nil),                       // 38: tendermint.abci.Snapshot
	(*RequestCommit)(nil),                  // 39: tendermint.abci.RequestCommit
	(*ResponseCommit)(nil),                 // 40: tendermint.abci.ResponseCommit
	(*ResponseInitChain)(nil),              // 41: tendermint.abci.ResponseInitChain
	(*ResponseDeliverTx)(nil),              // 42: tendermint.abci.ResponseDeliverTx
	(*timestamppb.Timestamp)(nil),          // 43: google.protobuf.Timestamp
	(*crypto.ProofOps)(nil),                // 44: tendermint.crypto.ProofOps
	(*types.EvidenceParams)(nil),           // 45: tendermint.types.EvidenceParams
	(*types.ValidatorParams)(nil),          // 46: tendermint.types.ValidatorParams
	(*types.VersionParams)(nil),            // 47: tendermint.types.VersionParams
	(*crypto.PublicKey)(nil),               // 48: tendermint.crypto.PublicKey
}
var file_tendermint_abci_types_proto_depIdxs = []int32{
	5,  // 0: tendermint.abci.Request.echo:type_name -> tendermint.abci.RequestEcho
	6,  // 1: tendermint.abci.Request.flush:type_name -> tendermint.abci.RequestFlush
	7,  // 2: tendermint.abci.Request.info:type_name -> tendermint.abci.RequestInfo
	8,  // 3: tendermint.abci.Request.set_option:type_name -> tendermint.abci.RequestSetOption
	9,  // 4: tendermint.abci.Request.init_chain:type_name -> tendermint.abci.RequestInitChain
	10, // 5: tendermint.abci.Request.query:type_name -> tendermint.abci.RequestQuery
	11, // 6: tendermint.abci.Request.check_tx:type_name -> tendermint.abci.RequestCheckTx
	12, // 7: tendermint.abci.Request.list_snapshots:type_name -> tendermint.abci.RequestListSnapshots
	13, // 8: tendermint.abci.Request.offer_snapshot:type_name -> tendermint.abci.RequestOfferSnapshot
	14, // 9: tendermint.abci.Request.load_snapshot_chunk:type_name -> tendermint.abci.RequestLoadSnapshotChunk
	15, // 10: tendermint.abci.Request.apply_snapshot_chunk:type_name -> tendermint.abci.RequestApplySnapshotChunk
	43, // 11: tendermint.abci.RequestInitChain.time:type_name -> google.protobuf.Timestamp
	28, // 12: tendermint.abci.RequestInitChain.consensus_params:type_name -> tendermint.abci.ConsensusParams
	35, // 13: tendermint.abci.RequestInitChain.validators:type_name -> tendermint.abci.ValidatorUpdate
	0,  // 14: tendermint.abci.RequestCheckTx.type:type_name -> tendermint.abci.CheckTxType
	38, // 15: tendermint.abci.RequestOfferSnapshot.snapshot:type_name -> tendermint.abci.Snapshot
	17, // 16: tendermint.abci.Response.exception:type_name -> tendermint.abci.ResponseException
	18, // 17: tendermint.abci.Response.echo:type_name -> tendermint.abci.ResponseEcho
	19, // 18: tendermint.abci.Response.flush:type_name -> tendermint.abci.ResponseFlush
	20, // 19: tendermint.abci.Response.info:type_name -> tendermint.abci.ResponseInfo
	21, // 20: tendermint.abci.Response.set_option:type_name -> tendermint.abci.ResponseSetOption
	41, // 21: tendermint.abci.Response.init_chain:type_name -> tendermint.abci.ResponseInitChain
	22, // 22: tendermint.abci.Response.query:type_name -> tendermint.abci.ResponseQuery
	23, // 23: tendermint.abci.Response.check_tx:type_name -> tendermint.abci.ResponseCheckTx
	24, // 24: tendermint.abci.Response.list_snapshots:type_name -> tendermint.abci.ResponseListSnapshots
	25, // 25: tendermint.abci.Response.offer_snapshot:type_name -> tendermint.abci.ResponseOfferSnapshot
	26, // 26: tendermint.abci.Response.load_snapshot_chunk:type_name -> tendermint.abci.ResponseLoadSnapshotChunk
	27, // 27: tendermint.abci.Response.apply_snapshot_chunk:type_name -> tendermint.abci.ResponseApplySnapshotChunk
	44, // 28: tendermint.abci.ResponseQuery.proof_ops:type_name -> tendermint.crypto.ProofOps
	31, // 29: tendermint.abci.ResponseCheckTx.events:type_name -> tendermint.abci.Event
	38, // 30: tendermint.abci.ResponseListSnapshots.snapshots:type_name -> tendermint.abci.Snapshot
	2,  // 31: tendermint.abci.ResponseOfferSnapshot.result:type_name -> tendermint.abci.ResponseOfferSnapshot.Result
	3,  // 32: tendermint.abci.ResponseApplySnapshotChunk.result:type_name -> tendermint.abci.ResponseApplySnapshotChunk.Result
	29, // 33: tendermint.abci.ConsensusParams.block:type_name -> tendermint.abci.BlockParams
	45, // 34: tendermint.abci.ConsensusParams.evidence:type_name -> tendermint.types.EvidenceParams
	46, // 35: tendermint.abci.ConsensusParams.validator:type_name -> tendermint.types.ValidatorParams
	47, // 36: tendermint.abci.ConsensusParams.version:type_name -> tendermint.types.VersionParams
	36, // 37: tendermint.abci.LastCommitInfo.votes:type_name -> tendermint.abci.VoteInfo
	32, // 38: tendermint.abci.Event.attributes:type_name -> tendermint.abci.EventAttribute
	42, // 39: tendermint.abci.TxResult.result:type_name -> tendermint.abci.ResponseDeliverTx
	48, // 40: tendermint.abci.Validator.pub_key:type_name -> tendermint.crypto.PublicKey
	48, // 41: tendermint.abci.ValidatorUpdate.pub_key:type_name -> tendermint.crypto.PublicKey
	34, // 42: tendermint.abci.VoteInfo.validator:type_name -> tendermint.abci.Validator
	1,  // 43: tendermint.abci.Evidence.type:type_name -> tendermint.abci.EvidenceType
	34, // 44: tendermint.abci.Evidence.validator:type_name -> tendermint.abci.Validator
	43, // 45: tendermint.abci.Evidence.time:type_name -> google.protobuf.Timestamp
	35, // 46: tendermint.abci.ResponseInitChain.validators:type_name -> tendermint.abci.ValidatorUpdate
	28, // 47: tendermint.abci.ResponseInitChain.consensus_params:type_name -> tendermint.abci.ConsensusParams
	31, // 48: tendermint.abci.ResponseDeliverTx.events:type_name -> tendermint.abci.Event
	5,  // 49: tendermint.abci.ABCIApplication.Echo:input_type -> tendermint.abci.RequestEcho
	6,  // 50: tendermint.abci.ABCIApplication.Flush:input_type -> tendermint.abci.RequestFlush
	7,  // 51: tendermint.abci.ABCIApplication.Info:input_type -> tendermint.abci.RequestInfo
	8,  // 52: tendermint.abci.ABCIApplication.SetOption:input_type -> tendermint.abci.RequestSetOption
	11, // 53: tendermint.abci.ABCIApplication.CheckTx:input_type -> tendermint.abci.RequestCheckTx
	10, // 54: tendermint.abci.ABCIApplication.Query:input_type -> tendermint.abci.RequestQuery
	39, // 55: tendermint.abci.ABCIApplication.Commit:input_type -> tendermint.abci.RequestCommit
	9,  // 56: tendermint.abci.ABCIApplication.InitChain:input_type -> tendermint.abci.RequestInitChain
	12, // 57: tendermint.abci.ABCIApplication.ListSnapshots:input_type -> tendermint.abci.RequestListSnapshots
	13, // 58: tendermint.abci.ABCIApplication.OfferSnapshot:input_type -> tendermint.abci.RequestOfferSnapshot
	14, // 59: tendermint.abci.ABCIApplication.LoadSnapshotChunk:input_type -> tendermint.abci.RequestLoadSnapshotChunk
	15, // 60: tendermint.abci.ABCIApplication.ApplySnapshotChunk:input_type -> tendermint.abci.RequestApplySnapshotChunk
	18, // 61: tendermint.abci.ABCIApplication.Echo:output_type -> tendermint.abci.ResponseEcho
	19, // 62: tendermint.abci.ABCIApplication.Flush:output_type -> tendermint.abci.ResponseFlush
	20, // 63: tendermint.abci.ABCIApplication.Info:output_type -> tendermint.abci.ResponseInfo
	21, // 64: tendermint.abci.ABCIApplication.SetOption:output_type -> tendermint.abci.ResponseSetOption
	23, // 65: tendermint.abci.ABCIApplication.CheckTx:output_type -> tendermint.abci.ResponseCheckTx
	22, // 66: tendermint.abci.ABCIApplication.Query:output_type -> tendermint.abci.ResponseQuery
	40, // 67: tendermint.abci.ABCIApplication.Commit:output_type -> tendermint.abci.ResponseCommit
	41, // 68: tendermint.abci.ABCIApplication.InitChain:output_type -> tendermint.abci.ResponseInitChain
	24, // 69: tendermint.abci.ABCIApplication.ListSnapshots:output_type -> tendermint.abci.ResponseListSnapshots
	25, // 70: tendermint.abci.ABCIApplication.OfferSnapshot:output_type -> tendermint.abci.ResponseOfferSnapshot
	26, // 71: tendermint.abci.ABCIApplication.LoadSnapshotChunk:output_type -> tendermint.abci.ResponseLoadSnapshotChunk
	27, // 72: tendermint.abci.ABCIApplication.ApplySnapshotChunk:output_type -> tendermint.abci.ResponseApplySnapshotChunk
	61, // [61:73] is the sub-list for method output_type
	49, // [49:61] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_tendermint_abci_types_proto_init() }
func file_tendermint_abci_types_proto_init() {
	if File_tendermint_abci_types_proto != nil {
		return
	}
	file_tendermint_abci_types_proto_msgTypes[0].OneofWrappers = []any{
		(*Request_Echo)(nil),
		(*Request_Flush)(nil),
		(*Request_Info)(nil),
		(*Request_SetOption)(nil),
		(*Request_InitChain)(nil),
		(*Request_Query)(nil),
		(*Request_CheckTx)(nil),
		(*Request_ListSnapshots)(nil),
		(*Request_OfferSnapshot)(nil),
		(*Request_LoadSnapshotChunk)(nil),
		(*Request_ApplySnapshotChunk)(nil),
	}
	file_tendermint_abci_types_proto_msgTypes[12].OneofWrappers = []any{
		(*Response_Exception)(nil),
		(*Response_Echo)(nil),
		(*Response_Flush)(nil),
		(*Response_Info)(nil),
		(*Response_SetOption)(nil),
		(*Response_InitChain)(nil),
		(*Response_Query)(nil),
		(*Response_CheckTx)(nil),
		(*Response_ListSnapshots)(nil),
		(*Response_OfferSnapshot)(nil),
		(*Response_LoadSnapshotChunk)(nil),
		(*Response_ApplySnapshotChunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tendermint_abci_types_proto_rawDesc), len(file_tendermint_abci_types_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tendermint_abci_types_proto_goTypes,
		DependencyIndexes: file_tendermint_abci_types_proto_depIdxs,
		EnumInfos:         file_tendermint_abci_types_proto_enumTypes,
		MessageInfos:      file_tendermint_abci_types_proto_msgTypes,
	}.Build()
	File_tendermint_abci_types_proto = out.File
	file_tendermint_abci_types_proto_goTypes = nil
	file_tendermint_abci_types_proto_depIdxs = nil
}
