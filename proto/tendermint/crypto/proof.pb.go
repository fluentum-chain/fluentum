// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tendermint/crypto/proof.proto

package crypto

import (
	_ "github.com/fluentum-chain/fluentum/proto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Proof struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Index         int64                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	LeafHash      []byte                 `protobuf:"bytes,3,opt,name=leaf_hash,json=leafHash,proto3" json:"leaf_hash,omitempty"`
	Aunts         [][]byte               `protobuf:"bytes,4,rep,name=aunts,proto3" json:"aunts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Proof) Reset() {
	*x = Proof{}
	mi := &file_tendermint_crypto_proof_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_crypto_proof_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_tendermint_crypto_proof_proto_rawDescGZIP(), []int{0}
}

func (x *Proof) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Proof) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Proof) GetLeafHash() []byte {
	if x != nil {
		return x.LeafHash
	}
	return nil
}

func (x *Proof) GetAunts() [][]byte {
	if x != nil {
		return x.Aunts
	}
	return nil
}

type ValueOp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Encoded in ProofOp.Key.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// To encode in ProofOp.Data
	Proof         *Proof `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValueOp) Reset() {
	*x = ValueOp{}
	mi := &file_tendermint_crypto_proof_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValueOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueOp) ProtoMessage() {}

func (x *ValueOp) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_crypto_proof_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueOp.ProtoReflect.Descriptor instead.
func (*ValueOp) Descriptor() ([]byte, []int) {
	return file_tendermint_crypto_proof_proto_rawDescGZIP(), []int{1}
}

func (x *ValueOp) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ValueOp) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type DominoOp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Input         string                 `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Output        string                 `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DominoOp) Reset() {
	*x = DominoOp{}
	mi := &file_tendermint_crypto_proof_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DominoOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DominoOp) ProtoMessage() {}

func (x *DominoOp) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_crypto_proof_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DominoOp.ProtoReflect.Descriptor instead.
func (*DominoOp) Descriptor() ([]byte, []int) {
	return file_tendermint_crypto_proof_proto_rawDescGZIP(), []int{2}
}

func (x *DominoOp) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DominoOp) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *DominoOp) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

// ProofOp defines an operation used for calculating Merkle root
// The data could be arbitrary format, providing nessecary data
// for example neighbouring node hash
type ProofOp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Key           []byte                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProofOp) Reset() {
	*x = ProofOp{}
	mi := &file_tendermint_crypto_proof_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProofOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOp) ProtoMessage() {}

func (x *ProofOp) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_crypto_proof_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOp.ProtoReflect.Descriptor instead.
func (*ProofOp) Descriptor() ([]byte, []int) {
	return file_tendermint_crypto_proof_proto_rawDescGZIP(), []int{3}
}

func (x *ProofOp) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProofOp) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ProofOp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// ProofOps is Merkle proof defined by the list of ProofOps
type ProofOps struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ops           []*ProofOp             `protobuf:"bytes,1,rep,name=ops,proto3" json:"ops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProofOps) Reset() {
	*x = ProofOps{}
	mi := &file_tendermint_crypto_proof_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProofOps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOps) ProtoMessage() {}

func (x *ProofOps) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_crypto_proof_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOps.ProtoReflect.Descriptor instead.
func (*ProofOps) Descriptor() ([]byte, []int) {
	return file_tendermint_crypto_proof_proto_rawDescGZIP(), []int{4}
}

func (x *ProofOps) GetOps() []*ProofOp {
	if x != nil {
		return x.Ops
	}
	return nil
}

var File_tendermint_crypto_proof_proto protoreflect.FileDescriptor

const file_tendermint_crypto_proof_proto_rawDesc = "" +
	"\n" +
	"\x1dtendermint/crypto/proof.proto\x12\x11tendermint.crypto\x1a\x14gogoproto/gogo.proto\"f\n" +
	"\x05Proof\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x03R\x05total\x12\x14\n" +
	"\x05index\x18\x02 \x01(\x03R\x05index\x12\x1b\n" +
	"\tleaf_hash\x18\x03 \x01(\fR\bleafHash\x12\x14\n" +
	"\x05aunts\x18\x04 \x03(\fR\x05aunts\"K\n" +
	"\aValueOp\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12.\n" +
	"\x05proof\x18\x02 \x01(\v2\x18.tendermint.crypto.ProofR\x05proof\"J\n" +
	"\bDominoOp\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05input\x18\x02 \x01(\tR\x05input\x12\x16\n" +
	"\x06output\x18\x03 \x01(\tR\x06output\"C\n" +
	"\aProofOp\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x10\n" +
	"\x03key\x18\x02 \x01(\fR\x03key\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\">\n" +
	"\bProofOps\x122\n" +
	"\x03ops\x18\x01 \x03(\v2\x1a.tendermint.crypto.ProofOpB\x04\xc8\xde\x1f\x00R\x03opsB\xc4\x01\n" +
	"\x15com.tendermint.cryptoB\n" +
	"ProofProtoP\x01Z:github.com/fluentum-chain/fluentum/proto/tendermint/crypto\xa2\x02\x03TCX\xaa\x02\x11Tendermint.Crypto\xca\x02\x11Tendermint\\Crypto\xe2\x02\x1dTendermint\\Crypto\\GPBMetadata\xea\x02\x12Tendermint::Cryptob\x06proto3"

var (
	file_tendermint_crypto_proof_proto_rawDescOnce sync.Once
	file_tendermint_crypto_proof_proto_rawDescData []byte
)

func file_tendermint_crypto_proof_proto_rawDescGZIP() []byte {
	file_tendermint_crypto_proof_proto_rawDescOnce.Do(func() {
		file_tendermint_crypto_proof_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tendermint_crypto_proof_proto_rawDesc), len(file_tendermint_crypto_proof_proto_rawDesc)))
	})
	return file_tendermint_crypto_proof_proto_rawDescData
}

var file_tendermint_crypto_proof_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tendermint_crypto_proof_proto_goTypes = []any{
	(*Proof)(nil),    // 0: tendermint.crypto.Proof
	(*ValueOp)(nil),  // 1: tendermint.crypto.ValueOp
	(*DominoOp)(nil), // 2: tendermint.crypto.DominoOp
	(*ProofOp)(nil),  // 3: tendermint.crypto.ProofOp
	(*ProofOps)(nil), // 4: tendermint.crypto.ProofOps
}
var file_tendermint_crypto_proof_proto_depIdxs = []int32{
	0, // 0: tendermint.crypto.ValueOp.proof:type_name -> tendermint.crypto.Proof
	3, // 1: tendermint.crypto.ProofOps.ops:type_name -> tendermint.crypto.ProofOp
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_tendermint_crypto_proof_proto_init() }
func file_tendermint_crypto_proof_proto_init() {
	if File_tendermint_crypto_proof_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tendermint_crypto_proof_proto_rawDesc), len(file_tendermint_crypto_proof_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tendermint_crypto_proof_proto_goTypes,
		DependencyIndexes: file_tendermint_crypto_proof_proto_depIdxs,
		MessageInfos:      file_tendermint_crypto_proof_proto_msgTypes,
	}.Build()
	File_tendermint_crypto_proof_proto = out.File
	file_tendermint_crypto_proof_proto_goTypes = nil
	file_tendermint_crypto_proof_proto_depIdxs = nil
}
