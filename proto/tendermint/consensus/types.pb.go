// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tendermint/consensus/types.proto

package consensus

import (
	_ "github.com/fluentum-chain/fluentum/proto/gogoproto"
	bits "github.com/fluentum-chain/fluentum/proto/tendermint/libs/bits"
	types "github.com/fluentum-chain/fluentum/proto/tendermint/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NewRoundStep is sent for every step taken in the ConsensusState.
// For every height/round/step transition
type NewRoundStep struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Height                int64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round                 int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Step                  uint32                 `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	SecondsSinceStartTime int64                  `protobuf:"varint,4,opt,name=seconds_since_start_time,json=secondsSinceStartTime,proto3" json:"seconds_since_start_time,omitempty"`
	LastCommitRound       int32                  `protobuf:"varint,5,opt,name=last_commit_round,json=lastCommitRound,proto3" json:"last_commit_round,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NewRoundStep) Reset() {
	*x = NewRoundStep{}
	mi := &file_tendermint_consensus_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewRoundStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRoundStep) ProtoMessage() {}

func (x *NewRoundStep) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_consensus_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRoundStep.ProtoReflect.Descriptor instead.
func (*NewRoundStep) Descriptor() ([]byte, []int) {
	return file_tendermint_consensus_types_proto_rawDescGZIP(), []int{0}
}

func (x *NewRoundStep) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *NewRoundStep) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *NewRoundStep) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *NewRoundStep) GetSecondsSinceStartTime() int64 {
	if x != nil {
		return x.SecondsSinceStartTime
	}
	return 0
}

func (x *NewRoundStep) GetLastCommitRound() int32 {
	if x != nil {
		return x.LastCommitRound
	}
	return 0
}

// NewValidBlock is sent when a validator observes a valid block B in some round r,
// i.e., there is a Proposal for block B and 2/3+ prevotes for the block B in the round r.
// In case the block is also committed, then IsCommit flag is set to true.
type NewValidBlock struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Height             int64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round              int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	BlockPartSetHeader *types.PartSetHeader   `protobuf:"bytes,3,opt,name=block_part_set_header,json=blockPartSetHeader,proto3" json:"block_part_set_header,omitempty"`
	BlockParts         *bits.BitArray         `protobuf:"bytes,4,opt,name=block_parts,json=blockParts,proto3" json:"block_parts,omitempty"`
	IsCommit           bool                   `protobuf:"varint,5,opt,name=is_commit,json=isCommit,proto3" json:"is_commit,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *NewValidBlock) Reset() {
	*x = NewValidBlock{}
	mi := &file_tendermint_consensus_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewValidBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewValidBlock) ProtoMessage() {}

func (x *NewValidBlock) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_consensus_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewValidBlock.ProtoReflect.Descriptor instead.
func (*NewValidBlock) Descriptor() ([]byte, []int) {
	return file_tendermint_consensus_types_proto_rawDescGZIP(), []int{1}
}

func (x *NewValidBlock) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *NewValidBlock) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *NewValidBlock) GetBlockPartSetHeader() *types.PartSetHeader {
	if x != nil {
		return x.BlockPartSetHeader
	}
	return nil
}

func (x *NewValidBlock) GetBlockParts() *bits.BitArray {
	if x != nil {
		return x.BlockParts
	}
	return nil
}

func (x *NewValidBlock) GetIsCommit() bool {
	if x != nil {
		return x.IsCommit
	}
	return false
}

// Proposal is sent when a new block is proposed.
type Proposal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Proposal      *types.Proposal        `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	mi := &file_tendermint_consensus_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_consensus_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_tendermint_consensus_types_proto_rawDescGZIP(), []int{2}
}

func (x *Proposal) GetProposal() *types.Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

// ProposalPOL is sent when a previous proposal is re-proposed.
type ProposalPOL struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Height           int64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	ProposalPolRound int32                  `protobuf:"varint,2,opt,name=proposal_pol_round,json=proposalPolRound,proto3" json:"proposal_pol_round,omitempty"`
	ProposalPol      *bits.BitArray         `protobuf:"bytes,3,opt,name=proposal_pol,json=proposalPol,proto3" json:"proposal_pol,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProposalPOL) Reset() {
	*x = ProposalPOL{}
	mi := &file_tendermint_consensus_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposalPOL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalPOL) ProtoMessage() {}

func (x *ProposalPOL) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_consensus_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalPOL.ProtoReflect.Descriptor instead.
func (*ProposalPOL) Descriptor() ([]byte, []int) {
	return file_tendermint_consensus_types_proto_rawDescGZIP(), []int{3}
}

func (x *ProposalPOL) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ProposalPOL) GetProposalPolRound() int32 {
	if x != nil {
		return x.ProposalPolRound
	}
	return 0
}

func (x *ProposalPOL) GetProposalPol() *bits.BitArray {
	if x != nil {
		return x.ProposalPol
	}
	return nil
}

// BlockPart is sent when gossipping a piece of the proposed block.
type BlockPart struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        int64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round         int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Part          *types.Part            `protobuf:"bytes,3,opt,name=part,proto3" json:"part,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockPart) Reset() {
	*x = BlockPart{}
	mi := &file_tendermint_consensus_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockPart) ProtoMessage() {}

func (x *BlockPart) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_consensus_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockPart.ProtoReflect.Descriptor instead.
func (*BlockPart) Descriptor() ([]byte, []int) {
	return file_tendermint_consensus_types_proto_rawDescGZIP(), []int{4}
}

func (x *BlockPart) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockPart) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *BlockPart) GetPart() *types.Part {
	if x != nil {
		return x.Part
	}
	return nil
}

// Vote is sent when voting for a proposal (or lack thereof).
type Vote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vote          *types.Vote            `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vote) Reset() {
	*x = Vote{}
	mi := &file_tendermint_consensus_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_consensus_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_tendermint_consensus_types_proto_rawDescGZIP(), []int{5}
}

func (x *Vote) GetVote() *types.Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

// HasVote is sent to indicate that a particular vote has been received.
type HasVote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        int64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round         int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Type          types.SignedMsgType    `protobuf:"varint,3,opt,name=type,proto3,enum=tendermint.types.SignedMsgType" json:"type,omitempty"`
	Index         int32                  `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HasVote) Reset() {
	*x = HasVote{}
	mi := &file_tendermint_consensus_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasVote) ProtoMessage() {}

func (x *HasVote) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_consensus_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasVote.ProtoReflect.Descriptor instead.
func (*HasVote) Descriptor() ([]byte, []int) {
	return file_tendermint_consensus_types_proto_rawDescGZIP(), []int{6}
}

func (x *HasVote) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *HasVote) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *HasVote) GetType() types.SignedMsgType {
	if x != nil {
		return x.Type
	}
	return types.SignedMsgType(0)
}

func (x *HasVote) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// VoteSetMaj23 is sent to indicate that a given BlockID has seen +2/3 votes.
type VoteSetMaj23 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        int64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round         int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Type          types.SignedMsgType    `protobuf:"varint,3,opt,name=type,proto3,enum=tendermint.types.SignedMsgType" json:"type,omitempty"`
	BlockId       *types.BlockID         `protobuf:"bytes,4,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoteSetMaj23) Reset() {
	*x = VoteSetMaj23{}
	mi := &file_tendermint_consensus_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteSetMaj23) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteSetMaj23) ProtoMessage() {}

func (x *VoteSetMaj23) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_consensus_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteSetMaj23.ProtoReflect.Descriptor instead.
func (*VoteSetMaj23) Descriptor() ([]byte, []int) {
	return file_tendermint_consensus_types_proto_rawDescGZIP(), []int{7}
}

func (x *VoteSetMaj23) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VoteSetMaj23) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *VoteSetMaj23) GetType() types.SignedMsgType {
	if x != nil {
		return x.Type
	}
	return types.SignedMsgType(0)
}

func (x *VoteSetMaj23) GetBlockId() *types.BlockID {
	if x != nil {
		return x.BlockId
	}
	return nil
}

// VoteSetBits is sent to communicate the bit-array of votes seen for the BlockID.
type VoteSetBits struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Height        int64                  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round         int32                  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Type          types.SignedMsgType    `protobuf:"varint,3,opt,name=type,proto3,enum=tendermint.types.SignedMsgType" json:"type,omitempty"`
	BlockId       *types.BlockID         `protobuf:"bytes,4,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Votes         *bits.BitArray         `protobuf:"bytes,5,opt,name=votes,proto3" json:"votes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VoteSetBits) Reset() {
	*x = VoteSetBits{}
	mi := &file_tendermint_consensus_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteSetBits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteSetBits) ProtoMessage() {}

func (x *VoteSetBits) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_consensus_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteSetBits.ProtoReflect.Descriptor instead.
func (*VoteSetBits) Descriptor() ([]byte, []int) {
	return file_tendermint_consensus_types_proto_rawDescGZIP(), []int{8}
}

func (x *VoteSetBits) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VoteSetBits) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *VoteSetBits) GetType() types.SignedMsgType {
	if x != nil {
		return x.Type
	}
	return types.SignedMsgType(0)
}

func (x *VoteSetBits) GetBlockId() *types.BlockID {
	if x != nil {
		return x.BlockId
	}
	return nil
}

func (x *VoteSetBits) GetVotes() *bits.BitArray {
	if x != nil {
		return x.Votes
	}
	return nil
}

type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Sum:
	//
	//	*Message_NewRoundStep
	//	*Message_NewValidBlock
	//	*Message_Proposal
	//	*Message_ProposalPol
	//	*Message_BlockPart
	//	*Message_Vote
	//	*Message_HasVote
	//	*Message_VoteSetMaj23
	//	*Message_VoteSetBits
	Sum           isMessage_Sum `protobuf_oneof:"sum"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_tendermint_consensus_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_consensus_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_tendermint_consensus_types_proto_rawDescGZIP(), []int{9}
}

func (x *Message) GetSum() isMessage_Sum {
	if x != nil {
		return x.Sum
	}
	return nil
}

func (x *Message) GetNewRoundStep() *NewRoundStep {
	if x != nil {
		if x, ok := x.Sum.(*Message_NewRoundStep); ok {
			return x.NewRoundStep
		}
	}
	return nil
}

func (x *Message) GetNewValidBlock() *NewValidBlock {
	if x != nil {
		if x, ok := x.Sum.(*Message_NewValidBlock); ok {
			return x.NewValidBlock
		}
	}
	return nil
}

func (x *Message) GetProposal() *Proposal {
	if x != nil {
		if x, ok := x.Sum.(*Message_Proposal); ok {
			return x.Proposal
		}
	}
	return nil
}

func (x *Message) GetProposalPol() *ProposalPOL {
	if x != nil {
		if x, ok := x.Sum.(*Message_ProposalPol); ok {
			return x.ProposalPol
		}
	}
	return nil
}

func (x *Message) GetBlockPart() *BlockPart {
	if x != nil {
		if x, ok := x.Sum.(*Message_BlockPart); ok {
			return x.BlockPart
		}
	}
	return nil
}

func (x *Message) GetVote() *Vote {
	if x != nil {
		if x, ok := x.Sum.(*Message_Vote); ok {
			return x.Vote
		}
	}
	return nil
}

func (x *Message) GetHasVote() *HasVote {
	if x != nil {
		if x, ok := x.Sum.(*Message_HasVote); ok {
			return x.HasVote
		}
	}
	return nil
}

func (x *Message) GetVoteSetMaj23() *VoteSetMaj23 {
	if x != nil {
		if x, ok := x.Sum.(*Message_VoteSetMaj23); ok {
			return x.VoteSetMaj23
		}
	}
	return nil
}

func (x *Message) GetVoteSetBits() *VoteSetBits {
	if x != nil {
		if x, ok := x.Sum.(*Message_VoteSetBits); ok {
			return x.VoteSetBits
		}
	}
	return nil
}

type isMessage_Sum interface {
	isMessage_Sum()
}

type Message_NewRoundStep struct {
	NewRoundStep *NewRoundStep `protobuf:"bytes,1,opt,name=new_round_step,json=newRoundStep,proto3,oneof"`
}

type Message_NewValidBlock struct {
	NewValidBlock *NewValidBlock `protobuf:"bytes,2,opt,name=new_valid_block,json=newValidBlock,proto3,oneof"`
}

type Message_Proposal struct {
	Proposal *Proposal `protobuf:"bytes,3,opt,name=proposal,proto3,oneof"`
}

type Message_ProposalPol struct {
	ProposalPol *ProposalPOL `protobuf:"bytes,4,opt,name=proposal_pol,json=proposalPol,proto3,oneof"`
}

type Message_BlockPart struct {
	BlockPart *BlockPart `protobuf:"bytes,5,opt,name=block_part,json=blockPart,proto3,oneof"`
}

type Message_Vote struct {
	Vote *Vote `protobuf:"bytes,6,opt,name=vote,proto3,oneof"`
}

type Message_HasVote struct {
	HasVote *HasVote `protobuf:"bytes,7,opt,name=has_vote,json=hasVote,proto3,oneof"`
}

type Message_VoteSetMaj23 struct {
	VoteSetMaj23 *VoteSetMaj23 `protobuf:"bytes,8,opt,name=vote_set_maj23,json=voteSetMaj23,proto3,oneof"`
}

type Message_VoteSetBits struct {
	VoteSetBits *VoteSetBits `protobuf:"bytes,9,opt,name=vote_set_bits,json=voteSetBits,proto3,oneof"`
}

func (*Message_NewRoundStep) isMessage_Sum() {}

func (*Message_NewValidBlock) isMessage_Sum() {}

func (*Message_Proposal) isMessage_Sum() {}

func (*Message_ProposalPol) isMessage_Sum() {}

func (*Message_BlockPart) isMessage_Sum() {}

func (*Message_Vote) isMessage_Sum() {}

func (*Message_HasVote) isMessage_Sum() {}

func (*Message_VoteSetMaj23) isMessage_Sum() {}

func (*Message_VoteSetBits) isMessage_Sum() {}

var File_tendermint_consensus_types_proto protoreflect.FileDescriptor

const file_tendermint_consensus_types_proto_rawDesc = "" +
	"\n" +
	" tendermint/consensus/types.proto\x12\x14tendermint.consensus\x1a\x14gogoproto/gogo.proto\x1a\x1ctendermint/types/types.proto\x1a tendermint/libs/bits/types.proto\"\xb5\x01\n" +
	"\fNewRoundStep\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x03R\x06height\x12\x14\n" +
	"\x05round\x18\x02 \x01(\x05R\x05round\x12\x12\n" +
	"\x04step\x18\x03 \x01(\rR\x04step\x127\n" +
	"\x18seconds_since_start_time\x18\x04 \x01(\x03R\x15secondsSinceStartTime\x12*\n" +
	"\x11last_commit_round\x18\x05 \x01(\x05R\x0flastCommitRound\"\xf5\x01\n" +
	"\rNewValidBlock\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x03R\x06height\x12\x14\n" +
	"\x05round\x18\x02 \x01(\x05R\x05round\x12X\n" +
	"\x15block_part_set_header\x18\x03 \x01(\v2\x1f.tendermint.types.PartSetHeaderB\x04\xc8\xde\x1f\x00R\x12blockPartSetHeader\x12?\n" +
	"\vblock_parts\x18\x04 \x01(\v2\x1e.tendermint.libs.bits.BitArrayR\n" +
	"blockParts\x12\x1b\n" +
	"\tis_commit\x18\x05 \x01(\bR\bisCommit\"H\n" +
	"\bProposal\x12<\n" +
	"\bproposal\x18\x01 \x01(\v2\x1a.tendermint.types.ProposalB\x04\xc8\xde\x1f\x00R\bproposal\"\x9c\x01\n" +
	"\vProposalPOL\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x03R\x06height\x12,\n" +
	"\x12proposal_pol_round\x18\x02 \x01(\x05R\x10proposalPolRound\x12G\n" +
	"\fproposal_pol\x18\x03 \x01(\v2\x1e.tendermint.libs.bits.BitArrayB\x04\xc8\xde\x1f\x00R\vproposalPol\"k\n" +
	"\tBlockPart\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x03R\x06height\x12\x14\n" +
	"\x05round\x18\x02 \x01(\x05R\x05round\x120\n" +
	"\x04part\x18\x03 \x01(\v2\x16.tendermint.types.PartB\x04\xc8\xde\x1f\x00R\x04part\"2\n" +
	"\x04Vote\x12*\n" +
	"\x04vote\x18\x01 \x01(\v2\x16.tendermint.types.VoteR\x04vote\"\x82\x01\n" +
	"\aHasVote\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x03R\x06height\x12\x14\n" +
	"\x05round\x18\x02 \x01(\x05R\x05round\x123\n" +
	"\x04type\x18\x03 \x01(\x0e2\x1f.tendermint.types.SignedMsgTypeR\x04type\x12\x14\n" +
	"\x05index\x18\x04 \x01(\x05R\x05index\"\xb8\x01\n" +
	"\fVoteSetMaj23\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x03R\x06height\x12\x14\n" +
	"\x05round\x18\x02 \x01(\x05R\x05round\x123\n" +
	"\x04type\x18\x03 \x01(\x0e2\x1f.tendermint.types.SignedMsgTypeR\x04type\x12E\n" +
	"\bblock_id\x18\x04 \x01(\v2\x19.tendermint.types.BlockIDB\x0f\xc8\xde\x1f\x00\xe2\xde\x1f\aBlockIDR\ablockId\"\xf3\x01\n" +
	"\vVoteSetBits\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x03R\x06height\x12\x14\n" +
	"\x05round\x18\x02 \x01(\x05R\x05round\x123\n" +
	"\x04type\x18\x03 \x01(\x0e2\x1f.tendermint.types.SignedMsgTypeR\x04type\x12E\n" +
	"\bblock_id\x18\x04 \x01(\v2\x19.tendermint.types.BlockIDB\x0f\xc8\xde\x1f\x00\xe2\xde\x1f\aBlockIDR\ablockId\x12:\n" +
	"\x05votes\x18\x05 \x01(\v2\x1e.tendermint.libs.bits.BitArrayB\x04\xc8\xde\x1f\x00R\x05votes\"\xf6\x04\n" +
	"\aMessage\x12J\n" +
	"\x0enew_round_step\x18\x01 \x01(\v2\".tendermint.consensus.NewRoundStepH\x00R\fnewRoundStep\x12M\n" +
	"\x0fnew_valid_block\x18\x02 \x01(\v2#.tendermint.consensus.NewValidBlockH\x00R\rnewValidBlock\x12<\n" +
	"\bproposal\x18\x03 \x01(\v2\x1e.tendermint.consensus.ProposalH\x00R\bproposal\x12F\n" +
	"\fproposal_pol\x18\x04 \x01(\v2!.tendermint.consensus.ProposalPOLH\x00R\vproposalPol\x12@\n" +
	"\n" +
	"block_part\x18\x05 \x01(\v2\x1f.tendermint.consensus.BlockPartH\x00R\tblockPart\x120\n" +
	"\x04vote\x18\x06 \x01(\v2\x1a.tendermint.consensus.VoteH\x00R\x04vote\x12:\n" +
	"\bhas_vote\x18\a \x01(\v2\x1d.tendermint.consensus.HasVoteH\x00R\ahasVote\x12J\n" +
	"\x0evote_set_maj23\x18\b \x01(\v2\".tendermint.consensus.VoteSetMaj23H\x00R\fvoteSetMaj23\x12G\n" +
	"\rvote_set_bits\x18\t \x01(\v2!.tendermint.consensus.VoteSetBitsH\x00R\vvoteSetBitsB\x05\n" +
	"\x03sumB\xd6\x01\n" +
	"\x18com.tendermint.consensusB\n" +
	"TypesProtoP\x01Z=github.com/fluentum-chain/fluentum/proto/tendermint/consensus\xa2\x02\x03TCX\xaa\x02\x14Tendermint.Consensus\xca\x02\x14Tendermint\\Consensus\xe2\x02 Tendermint\\Consensus\\GPBMetadata\xea\x02\x15Tendermint::Consensusb\x06proto3"

var (
	file_tendermint_consensus_types_proto_rawDescOnce sync.Once
	file_tendermint_consensus_types_proto_rawDescData []byte
)

func file_tendermint_consensus_types_proto_rawDescGZIP() []byte {
	file_tendermint_consensus_types_proto_rawDescOnce.Do(func() {
		file_tendermint_consensus_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tendermint_consensus_types_proto_rawDesc), len(file_tendermint_consensus_types_proto_rawDesc)))
	})
	return file_tendermint_consensus_types_proto_rawDescData
}

var file_tendermint_consensus_types_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_tendermint_consensus_types_proto_goTypes = []any{
	(*NewRoundStep)(nil),        // 0: tendermint.consensus.NewRoundStep
	(*NewValidBlock)(nil),       // 1: tendermint.consensus.NewValidBlock
	(*Proposal)(nil),            // 2: tendermint.consensus.Proposal
	(*ProposalPOL)(nil),         // 3: tendermint.consensus.ProposalPOL
	(*BlockPart)(nil),           // 4: tendermint.consensus.BlockPart
	(*Vote)(nil),                // 5: tendermint.consensus.Vote
	(*HasVote)(nil),             // 6: tendermint.consensus.HasVote
	(*VoteSetMaj23)(nil),        // 7: tendermint.consensus.VoteSetMaj23
	(*VoteSetBits)(nil),         // 8: tendermint.consensus.VoteSetBits
	(*Message)(nil),             // 9: tendermint.consensus.Message
	(*types.PartSetHeader)(nil), // 10: tendermint.types.PartSetHeader
	(*bits.BitArray)(nil),       // 11: tendermint.libs.bits.BitArray
	(*types.Proposal)(nil),      // 12: tendermint.types.Proposal
	(*types.Part)(nil),          // 13: tendermint.types.Part
	(*types.Vote)(nil),          // 14: tendermint.types.Vote
	(types.SignedMsgType)(0),    // 15: tendermint.types.SignedMsgType
	(*types.BlockID)(nil),       // 16: tendermint.types.BlockID
}
var file_tendermint_consensus_types_proto_depIdxs = []int32{
	10, // 0: tendermint.consensus.NewValidBlock.block_part_set_header:type_name -> tendermint.types.PartSetHeader
	11, // 1: tendermint.consensus.NewValidBlock.block_parts:type_name -> tendermint.libs.bits.BitArray
	12, // 2: tendermint.consensus.Proposal.proposal:type_name -> tendermint.types.Proposal
	11, // 3: tendermint.consensus.ProposalPOL.proposal_pol:type_name -> tendermint.libs.bits.BitArray
	13, // 4: tendermint.consensus.BlockPart.part:type_name -> tendermint.types.Part
	14, // 5: tendermint.consensus.Vote.vote:type_name -> tendermint.types.Vote
	15, // 6: tendermint.consensus.HasVote.type:type_name -> tendermint.types.SignedMsgType
	15, // 7: tendermint.consensus.VoteSetMaj23.type:type_name -> tendermint.types.SignedMsgType
	16, // 8: tendermint.consensus.VoteSetMaj23.block_id:type_name -> tendermint.types.BlockID
	15, // 9: tendermint.consensus.VoteSetBits.type:type_name -> tendermint.types.SignedMsgType
	16, // 10: tendermint.consensus.VoteSetBits.block_id:type_name -> tendermint.types.BlockID
	11, // 11: tendermint.consensus.VoteSetBits.votes:type_name -> tendermint.libs.bits.BitArray
	0,  // 12: tendermint.consensus.Message.new_round_step:type_name -> tendermint.consensus.NewRoundStep
	1,  // 13: tendermint.consensus.Message.new_valid_block:type_name -> tendermint.consensus.NewValidBlock
	2,  // 14: tendermint.consensus.Message.proposal:type_name -> tendermint.consensus.Proposal
	3,  // 15: tendermint.consensus.Message.proposal_pol:type_name -> tendermint.consensus.ProposalPOL
	4,  // 16: tendermint.consensus.Message.block_part:type_name -> tendermint.consensus.BlockPart
	5,  // 17: tendermint.consensus.Message.vote:type_name -> tendermint.consensus.Vote
	6,  // 18: tendermint.consensus.Message.has_vote:type_name -> tendermint.consensus.HasVote
	7,  // 19: tendermint.consensus.Message.vote_set_maj23:type_name -> tendermint.consensus.VoteSetMaj23
	8,  // 20: tendermint.consensus.Message.vote_set_bits:type_name -> tendermint.consensus.VoteSetBits
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_tendermint_consensus_types_proto_init() }
func file_tendermint_consensus_types_proto_init() {
	if File_tendermint_consensus_types_proto != nil {
		return
	}
	file_tendermint_consensus_types_proto_msgTypes[9].OneofWrappers = []any{
		(*Message_NewRoundStep)(nil),
		(*Message_NewValidBlock)(nil),
		(*Message_Proposal)(nil),
		(*Message_ProposalPol)(nil),
		(*Message_BlockPart)(nil),
		(*Message_Vote)(nil),
		(*Message_HasVote)(nil),
		(*Message_VoteSetMaj23)(nil),
		(*Message_VoteSetBits)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tendermint_consensus_types_proto_rawDesc), len(file_tendermint_consensus_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tendermint_consensus_types_proto_goTypes,
		DependencyIndexes: file_tendermint_consensus_types_proto_depIdxs,
		MessageInfos:      file_tendermint_consensus_types_proto_msgTypes,
	}.Build()
	File_tendermint_consensus_types_proto = out.File
	file_tendermint_consensus_types_proto_goTypes = nil
	file_tendermint_consensus_types_proto_depIdxs = nil
}
