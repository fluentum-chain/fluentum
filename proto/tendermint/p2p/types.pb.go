// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tendermint/p2p/types.proto

package p2p

import (
	_ "github.com/fluentum-chain/fluentum/proto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetAddress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port          uint32                 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetAddress) Reset() {
	*x = NetAddress{}
	mi := &file_tendermint_p2p_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetAddress) ProtoMessage() {}

func (x *NetAddress) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_p2p_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetAddress.ProtoReflect.Descriptor instead.
func (*NetAddress) Descriptor() ([]byte, []int) {
	return file_tendermint_p2p_types_proto_rawDescGZIP(), []int{0}
}

func (x *NetAddress) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetAddress) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetAddress) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ProtocolVersion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	P2P           uint64                 `protobuf:"varint,1,opt,name=p2p,proto3" json:"p2p,omitempty"`
	Block         uint64                 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	App           uint64                 `protobuf:"varint,3,opt,name=app,proto3" json:"app,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProtocolVersion) Reset() {
	*x = ProtocolVersion{}
	mi := &file_tendermint_p2p_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProtocolVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolVersion) ProtoMessage() {}

func (x *ProtocolVersion) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_p2p_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolVersion.ProtoReflect.Descriptor instead.
func (*ProtocolVersion) Descriptor() ([]byte, []int) {
	return file_tendermint_p2p_types_proto_rawDescGZIP(), []int{1}
}

func (x *ProtocolVersion) GetP2P() uint64 {
	if x != nil {
		return x.P2P
	}
	return 0
}

func (x *ProtocolVersion) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *ProtocolVersion) GetApp() uint64 {
	if x != nil {
		return x.App
	}
	return 0
}

type DefaultNodeInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProtocolVersion *ProtocolVersion       `protobuf:"bytes,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	DefaultNodeId   string                 `protobuf:"bytes,2,opt,name=default_node_id,json=defaultNodeId,proto3" json:"default_node_id,omitempty"`
	ListenAddr      string                 `protobuf:"bytes,3,opt,name=listen_addr,json=listenAddr,proto3" json:"listen_addr,omitempty"`
	Network         string                 `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	Version         string                 `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Channels        []byte                 `protobuf:"bytes,6,opt,name=channels,proto3" json:"channels,omitempty"`
	Moniker         string                 `protobuf:"bytes,7,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Other           *DefaultNodeInfoOther  `protobuf:"bytes,8,opt,name=other,proto3" json:"other,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DefaultNodeInfo) Reset() {
	*x = DefaultNodeInfo{}
	mi := &file_tendermint_p2p_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultNodeInfo) ProtoMessage() {}

func (x *DefaultNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_p2p_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultNodeInfo.ProtoReflect.Descriptor instead.
func (*DefaultNodeInfo) Descriptor() ([]byte, []int) {
	return file_tendermint_p2p_types_proto_rawDescGZIP(), []int{2}
}

func (x *DefaultNodeInfo) GetProtocolVersion() *ProtocolVersion {
	if x != nil {
		return x.ProtocolVersion
	}
	return nil
}

func (x *DefaultNodeInfo) GetDefaultNodeId() string {
	if x != nil {
		return x.DefaultNodeId
	}
	return ""
}

func (x *DefaultNodeInfo) GetListenAddr() string {
	if x != nil {
		return x.ListenAddr
	}
	return ""
}

func (x *DefaultNodeInfo) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DefaultNodeInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DefaultNodeInfo) GetChannels() []byte {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *DefaultNodeInfo) GetMoniker() string {
	if x != nil {
		return x.Moniker
	}
	return ""
}

func (x *DefaultNodeInfo) GetOther() *DefaultNodeInfoOther {
	if x != nil {
		return x.Other
	}
	return nil
}

type DefaultNodeInfoOther struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxIndex       string                 `protobuf:"bytes,1,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	RpcAddress    string                 `protobuf:"bytes,2,opt,name=rpc_address,json=rpcAddress,proto3" json:"rpc_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DefaultNodeInfoOther) Reset() {
	*x = DefaultNodeInfoOther{}
	mi := &file_tendermint_p2p_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultNodeInfoOther) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultNodeInfoOther) ProtoMessage() {}

func (x *DefaultNodeInfoOther) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_p2p_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultNodeInfoOther.ProtoReflect.Descriptor instead.
func (*DefaultNodeInfoOther) Descriptor() ([]byte, []int) {
	return file_tendermint_p2p_types_proto_rawDescGZIP(), []int{3}
}

func (x *DefaultNodeInfoOther) GetTxIndex() string {
	if x != nil {
		return x.TxIndex
	}
	return ""
}

func (x *DefaultNodeInfoOther) GetRpcAddress() string {
	if x != nil {
		return x.RpcAddress
	}
	return ""
}

var File_tendermint_p2p_types_proto protoreflect.FileDescriptor

const file_tendermint_p2p_types_proto_rawDesc = "" +
	"\n" +
	"\x1atendermint/p2p/types.proto\x12\x0etendermint.p2p\x1a\x14gogoproto/gogo.proto\"P\n" +
	"\n" +
	"NetAddress\x12\x16\n" +
	"\x02id\x18\x01 \x01(\tB\x06\xe2\xde\x1f\x02IDR\x02id\x12\x16\n" +
	"\x02ip\x18\x02 \x01(\tB\x06\xe2\xde\x1f\x02IPR\x02ip\x12\x12\n" +
	"\x04port\x18\x03 \x01(\rR\x04port\"T\n" +
	"\x0fProtocolVersion\x12\x19\n" +
	"\x03p2p\x18\x01 \x01(\x04B\a\xe2\xde\x1f\x03P2PR\x03p2p\x12\x14\n" +
	"\x05block\x18\x02 \x01(\x04R\x05block\x12\x10\n" +
	"\x03app\x18\x03 \x01(\x04R\x03app\"\xeb\x02\n" +
	"\x0fDefaultNodeInfo\x12P\n" +
	"\x10protocol_version\x18\x01 \x01(\v2\x1f.tendermint.p2p.ProtocolVersionB\x04\xc8\xde\x1f\x00R\x0fprotocolVersion\x129\n" +
	"\x0fdefault_node_id\x18\x02 \x01(\tB\x11\xe2\xde\x1f\rDefaultNodeIDR\rdefaultNodeId\x12\x1f\n" +
	"\vlisten_addr\x18\x03 \x01(\tR\n" +
	"listenAddr\x12\x18\n" +
	"\anetwork\x18\x04 \x01(\tR\anetwork\x12\x18\n" +
	"\aversion\x18\x05 \x01(\tR\aversion\x12\x1a\n" +
	"\bchannels\x18\x06 \x01(\fR\bchannels\x12\x18\n" +
	"\amoniker\x18\a \x01(\tR\amoniker\x12@\n" +
	"\x05other\x18\b \x01(\v2$.tendermint.p2p.DefaultNodeInfoOtherB\x04\xc8\xde\x1f\x00R\x05other\"b\n" +
	"\x14DefaultNodeInfoOther\x12\x19\n" +
	"\btx_index\x18\x01 \x01(\tR\atxIndex\x12/\n" +
	"\vrpc_address\x18\x02 \x01(\tB\x0e\xe2\xde\x1f\n" +
	"RPCAddressR\n" +
	"rpcAddressB\xb2\x01\n" +
	"\x12com.tendermint.p2pB\n" +
	"TypesProtoP\x01Z7github.com/fluentum-chain/fluentum/proto/tendermint/p2p\xa2\x02\x03TPX\xaa\x02\x0eTendermint.P2p\xca\x02\x0eTendermint\\P2p\xe2\x02\x1aTendermint\\P2p\\GPBMetadata\xea\x02\x0fTendermint::P2pb\x06proto3"

var (
	file_tendermint_p2p_types_proto_rawDescOnce sync.Once
	file_tendermint_p2p_types_proto_rawDescData []byte
)

func file_tendermint_p2p_types_proto_rawDescGZIP() []byte {
	file_tendermint_p2p_types_proto_rawDescOnce.Do(func() {
		file_tendermint_p2p_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tendermint_p2p_types_proto_rawDesc), len(file_tendermint_p2p_types_proto_rawDesc)))
	})
	return file_tendermint_p2p_types_proto_rawDescData
}

var file_tendermint_p2p_types_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tendermint_p2p_types_proto_goTypes = []any{
	(*NetAddress)(nil),           // 0: tendermint.p2p.NetAddress
	(*ProtocolVersion)(nil),      // 1: tendermint.p2p.ProtocolVersion
	(*DefaultNodeInfo)(nil),      // 2: tendermint.p2p.DefaultNodeInfo
	(*DefaultNodeInfoOther)(nil), // 3: tendermint.p2p.DefaultNodeInfoOther
}
var file_tendermint_p2p_types_proto_depIdxs = []int32{
	1, // 0: tendermint.p2p.DefaultNodeInfo.protocol_version:type_name -> tendermint.p2p.ProtocolVersion
	3, // 1: tendermint.p2p.DefaultNodeInfo.other:type_name -> tendermint.p2p.DefaultNodeInfoOther
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_tendermint_p2p_types_proto_init() }
func file_tendermint_p2p_types_proto_init() {
	if File_tendermint_p2p_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tendermint_p2p_types_proto_rawDesc), len(file_tendermint_p2p_types_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tendermint_p2p_types_proto_goTypes,
		DependencyIndexes: file_tendermint_p2p_types_proto_depIdxs,
		MessageInfos:      file_tendermint_p2p_types_proto_msgTypes,
	}.Build()
	File_tendermint_p2p_types_proto = out.File
	file_tendermint_p2p_types_proto_goTypes = nil
	file_tendermint_p2p_types_proto_depIdxs = nil
}
