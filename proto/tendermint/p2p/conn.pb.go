// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: tendermint/p2p/conn.proto

package p2p

import (
	_ "github.com/fluentum-chain/fluentum/proto/gogoproto"
	crypto "github.com/fluentum-chain/fluentum/proto/tendermint/crypto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PacketPing struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketPing) Reset() {
	*x = PacketPing{}
	mi := &file_tendermint_p2p_conn_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketPing) ProtoMessage() {}

func (x *PacketPing) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_p2p_conn_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketPing.ProtoReflect.Descriptor instead.
func (*PacketPing) Descriptor() ([]byte, []int) {
	return file_tendermint_p2p_conn_proto_rawDescGZIP(), []int{0}
}

type PacketPong struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketPong) Reset() {
	*x = PacketPong{}
	mi := &file_tendermint_p2p_conn_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketPong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketPong) ProtoMessage() {}

func (x *PacketPong) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_p2p_conn_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketPong.ProtoReflect.Descriptor instead.
func (*PacketPong) Descriptor() ([]byte, []int) {
	return file_tendermint_p2p_conn_proto_rawDescGZIP(), []int{1}
}

type PacketMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     int32                  `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Eof           bool                   `protobuf:"varint,2,opt,name=eof,proto3" json:"eof,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketMsg) Reset() {
	*x = PacketMsg{}
	mi := &file_tendermint_p2p_conn_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketMsg) ProtoMessage() {}

func (x *PacketMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_p2p_conn_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketMsg.ProtoReflect.Descriptor instead.
func (*PacketMsg) Descriptor() ([]byte, []int) {
	return file_tendermint_p2p_conn_proto_rawDescGZIP(), []int{2}
}

func (x *PacketMsg) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *PacketMsg) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

func (x *PacketMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Packet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Sum:
	//
	//	*Packet_PacketPing
	//	*Packet_PacketPong
	//	*Packet_PacketMsg
	Sum           isPacket_Sum `protobuf_oneof:"sum"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_tendermint_p2p_conn_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_p2p_conn_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_tendermint_p2p_conn_proto_rawDescGZIP(), []int{3}
}

func (x *Packet) GetSum() isPacket_Sum {
	if x != nil {
		return x.Sum
	}
	return nil
}

func (x *Packet) GetPacketPing() *PacketPing {
	if x != nil {
		if x, ok := x.Sum.(*Packet_PacketPing); ok {
			return x.PacketPing
		}
	}
	return nil
}

func (x *Packet) GetPacketPong() *PacketPong {
	if x != nil {
		if x, ok := x.Sum.(*Packet_PacketPong); ok {
			return x.PacketPong
		}
	}
	return nil
}

func (x *Packet) GetPacketMsg() *PacketMsg {
	if x != nil {
		if x, ok := x.Sum.(*Packet_PacketMsg); ok {
			return x.PacketMsg
		}
	}
	return nil
}

type isPacket_Sum interface {
	isPacket_Sum()
}

type Packet_PacketPing struct {
	PacketPing *PacketPing `protobuf:"bytes,1,opt,name=packet_ping,json=packetPing,proto3,oneof"`
}

type Packet_PacketPong struct {
	PacketPong *PacketPong `protobuf:"bytes,2,opt,name=packet_pong,json=packetPong,proto3,oneof"`
}

type Packet_PacketMsg struct {
	PacketMsg *PacketMsg `protobuf:"bytes,3,opt,name=packet_msg,json=packetMsg,proto3,oneof"`
}

func (*Packet_PacketPing) isPacket_Sum() {}

func (*Packet_PacketPong) isPacket_Sum() {}

func (*Packet_PacketMsg) isPacket_Sum() {}

type AuthSigMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PubKey        *crypto.PublicKey      `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Sig           []byte                 `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthSigMessage) Reset() {
	*x = AuthSigMessage{}
	mi := &file_tendermint_p2p_conn_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthSigMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSigMessage) ProtoMessage() {}

func (x *AuthSigMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tendermint_p2p_conn_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSigMessage.ProtoReflect.Descriptor instead.
func (*AuthSigMessage) Descriptor() ([]byte, []int) {
	return file_tendermint_p2p_conn_proto_rawDescGZIP(), []int{4}
}

func (x *AuthSigMessage) GetPubKey() *crypto.PublicKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *AuthSigMessage) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

var File_tendermint_p2p_conn_proto protoreflect.FileDescriptor

const file_tendermint_p2p_conn_proto_rawDesc = "" +
	"\n" +
	"\x19tendermint/p2p/conn.proto\x12\x0etendermint.p2p\x1a\x14gogoproto/gogo.proto\x1a\x1ctendermint/crypto/keys.proto\"\f\n" +
	"\n" +
	"PacketPing\"\f\n" +
	"\n" +
	"PacketPong\"h\n" +
	"\tPacketMsg\x12,\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\x05B\r\xe2\xde\x1f\tChannelIDR\tchannelId\x12\x19\n" +
	"\x03eof\x18\x02 \x01(\bB\a\xe2\xde\x1f\x03EOFR\x03eof\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\"\xc9\x01\n" +
	"\x06Packet\x12=\n" +
	"\vpacket_ping\x18\x01 \x01(\v2\x1a.tendermint.p2p.PacketPingH\x00R\n" +
	"packetPing\x12=\n" +
	"\vpacket_pong\x18\x02 \x01(\v2\x1a.tendermint.p2p.PacketPongH\x00R\n" +
	"packetPong\x12:\n" +
	"\n" +
	"packet_msg\x18\x03 \x01(\v2\x19.tendermint.p2p.PacketMsgH\x00R\tpacketMsgB\x05\n" +
	"\x03sum\"_\n" +
	"\x0eAuthSigMessage\x12;\n" +
	"\apub_key\x18\x01 \x01(\v2\x1c.tendermint.crypto.PublicKeyB\x04\xc8\xde\x1f\x00R\x06pubKey\x12\x10\n" +
	"\x03sig\x18\x02 \x01(\fR\x03sigB\xb1\x01\n" +
	"\x12com.tendermint.p2pB\tConnProtoP\x01Z7github.com/fluentum-chain/fluentum/proto/tendermint/p2p\xa2\x02\x03TPX\xaa\x02\x0eTendermint.P2p\xca\x02\x0eTendermint\\P2p\xe2\x02\x1aTendermint\\P2p\\GPBMetadata\xea\x02\x0fTendermint::P2pb\x06proto3"

var (
	file_tendermint_p2p_conn_proto_rawDescOnce sync.Once
	file_tendermint_p2p_conn_proto_rawDescData []byte
)

func file_tendermint_p2p_conn_proto_rawDescGZIP() []byte {
	file_tendermint_p2p_conn_proto_rawDescOnce.Do(func() {
		file_tendermint_p2p_conn_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tendermint_p2p_conn_proto_rawDesc), len(file_tendermint_p2p_conn_proto_rawDesc)))
	})
	return file_tendermint_p2p_conn_proto_rawDescData
}

var file_tendermint_p2p_conn_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tendermint_p2p_conn_proto_goTypes = []any{
	(*PacketPing)(nil),       // 0: tendermint.p2p.PacketPing
	(*PacketPong)(nil),       // 1: tendermint.p2p.PacketPong
	(*PacketMsg)(nil),        // 2: tendermint.p2p.PacketMsg
	(*Packet)(nil),           // 3: tendermint.p2p.Packet
	(*AuthSigMessage)(nil),   // 4: tendermint.p2p.AuthSigMessage
	(*crypto.PublicKey)(nil), // 5: tendermint.crypto.PublicKey
}
var file_tendermint_p2p_conn_proto_depIdxs = []int32{
	0, // 0: tendermint.p2p.Packet.packet_ping:type_name -> tendermint.p2p.PacketPing
	1, // 1: tendermint.p2p.Packet.packet_pong:type_name -> tendermint.p2p.PacketPong
	2, // 2: tendermint.p2p.Packet.packet_msg:type_name -> tendermint.p2p.PacketMsg
	5, // 3: tendermint.p2p.AuthSigMessage.pub_key:type_name -> tendermint.crypto.PublicKey
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_tendermint_p2p_conn_proto_init() }
func file_tendermint_p2p_conn_proto_init() {
	if File_tendermint_p2p_conn_proto != nil {
		return
	}
	file_tendermint_p2p_conn_proto_msgTypes[3].OneofWrappers = []any{
		(*Packet_PacketPing)(nil),
		(*Packet_PacketPong)(nil),
		(*Packet_PacketMsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tendermint_p2p_conn_proto_rawDesc), len(file_tendermint_p2p_conn_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tendermint_p2p_conn_proto_goTypes,
		DependencyIndexes: file_tendermint_p2p_conn_proto_depIdxs,
		MessageInfos:      file_tendermint_p2p_conn_proto_msgTypes,
	}.Build()
	File_tendermint_p2p_conn_proto = out.File
	file_tendermint_p2p_conn_proto_goTypes = nil
	file_tendermint_p2p_conn_proto_depIdxs = nil
}
