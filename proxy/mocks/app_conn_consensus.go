// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	"context"

	abci "github.com/cometbft/cometbft/abci/types"
	abcicli "github.com/fluentum-chain/fluentum/abci/client"
)

// AppConnConsensus is an autogenerated mock type for the AppConnConsensus type
type AppConnConsensus struct {
	mock.Mock
}

// CommitSync provides a mock function with given fields: ctx
func (_m *AppConnConsensus) CommitSync(ctx context.Context) (*abci.ResponseCommit, error) {
	ret := _m.Called(ctx)

	var r0 *abci.ResponseCommit
	if rf, ok := ret.Get(0).(func(context.Context) *abci.ResponseCommit); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseCommit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinalizeBlockSync provides a mock function with given fields: ctx, req
func (_m *AppConnConsensus) FinalizeBlockSync(ctx context.Context, req *abci.RequestFinalizeBlock) (*abci.ResponseFinalizeBlock, error) {
	ret := _m.Called(ctx, req)

	var r0 *abci.ResponseFinalizeBlock
	if rf, ok := ret.Get(0).(func(context.Context, *abci.RequestFinalizeBlock) *abci.ResponseFinalizeBlock); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseFinalizeBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *abci.RequestFinalizeBlock) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitChainSync provides a mock function with given fields: ctx, req
func (_m *AppConnConsensus) InitChainSync(ctx context.Context, req *abci.RequestInitChain) (*abci.ResponseInitChain, error) {
	ret := _m.Called(ctx, req)

	var r0 *abci.ResponseInitChain
	if rf, ok := ret.Get(0).(func(context.Context, *abci.RequestInitChain) *abci.ResponseInitChain); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseInitChain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *abci.RequestInitChain) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Error provides a mock function with given fields:
func (_m *AppConnConsensus) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetResponseCallback provides a mock function with given fields: _a0
func (_m *AppConnConsensus) SetResponseCallback(_a0 abcicli.Callback) {
	_m.Called(_a0)
}

type NewAppConnConsensusT interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppConnConsensus creates a new instance of AppConnConsensus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppConnConsensus(t NewAppConnConsensusT) *AppConnConsensus {
	mock := &AppConnConsensus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
