// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	"context"
	"time"

	abci "github.com/cometbft/cometbft/abci/types"
	abcicli "github.com/fluentum-chain/fluentum/abci/client"
)

// AppConnMempool is an autogenerated mock type for the AppConnMempool type
type AppConnMempool struct {
	mock.Mock
}

// CheckTx provides a mock function with given fields: ctx, req
func (_m *AppConnMempool) CheckTx(ctx context.Context, req *abci.RequestCheckTx) (*abci.ResponseCheckTx, error) {
	ret := _m.Called(ctx, req)

	var r0 *abci.ResponseCheckTx
	if rf, ok := ret.Get(0).(func(context.Context, *abci.RequestCheckTx) *abci.ResponseCheckTx); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseCheckTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *abci.RequestCheckTx) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckTxAsync provides a mock function with given fields: req
func (_m *AppConnMempool) CheckTxAsync(req *abci.RequestCheckTx) *abcicli.ReqRes {
	ret := _m.Called(req)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(*abci.RequestCheckTx) *abcicli.ReqRes); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// CheckTxWithTimeout provides a mock function with given fields: req, timeout
func (_m *AppConnMempool) CheckTxWithTimeout(req *abci.RequestCheckTx, timeout time.Duration) (*abci.ResponseCheckTx, error) {
	ret := _m.Called(req, timeout)

	var r0 *abci.ResponseCheckTx
	if rf, ok := ret.Get(0).(func(*abci.RequestCheckTx, time.Duration) *abci.ResponseCheckTx); ok {
		r0 = rf(req, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseCheckTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*abci.RequestCheckTx, time.Duration) error); ok {
		r1 = rf(req, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinalizeBlock provides a mock function with given fields: ctx, req
func (_m *AppConnMempool) FinalizeBlock(ctx context.Context, req *abci.RequestFinalizeBlock) (*abci.ResponseFinalizeBlock, error) {
	ret := _m.Called(ctx, req)

	var r0 *abci.ResponseFinalizeBlock
	if rf, ok := ret.Get(0).(func(context.Context, *abci.RequestFinalizeBlock) *abci.ResponseFinalizeBlock); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseFinalizeBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *abci.RequestFinalizeBlock) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Flush provides a mock function with given fields: ctx
func (_m *AppConnMempool) Flush(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Info provides a mock function with given fields: ctx, req
func (_m *AppConnMempool) Info(ctx context.Context, req *abci.RequestInfo) (*abci.ResponseInfo, error) {
	ret := _m.Called(ctx, req)

	var r0 *abci.ResponseInfo
	if rf, ok := ret.Get(0).(func(context.Context, *abci.RequestInfo) *abci.ResponseInfo); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *abci.RequestInfo) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Error provides a mock function with given fields:
func (_m *AppConnMempool) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetResponseCallback provides a mock function with given fields: _a0
func (_m *AppConnMempool) SetResponseCallback(_a0 abcicli.Callback) {
	_m.Called(_a0)
}

type NewAppConnMempoolT interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppConnMempool creates a new instance of AppConnMempool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppConnMempool(t NewAppConnMempoolT) *AppConnMempool {
	mock := &AppConnMempool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
